package parserFormula;

import java_cup.runtime.*;
import formula.*; 
import auxiliar.AuxiliarMethods;  
import java.util.List;


parser code {:
 
public void syntax_error(Symbol s){
        System.err.println("\n\nSyntax Error - line: " +  (s.left+1) +  " - value:" + s.value);
        
    }


    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {    
         System.err.println("\n\nUnrecovered Syntax error line: " +  (s.left+1) +  " - value:" + s.value);
    }

:}


terminal String EXIST, FORALL, PERMISSION, OBLIGATION, RECOVERY, LPAREN, RPAREN, NEXT, UNTIL,WEAK, TRUE, FALSE,
                NEG, IMPLIES, IMPLIESTEMP, SEMI, ID, AND, OR;

non terminal FormulaElement formula, path_form, path_form_extra, state_form, log_operation, conjunction, implication, negation, primary ;
non terminal  String  quantifier;
precedence left OR;
precedence left AND;
precedence left IMPLIES;

precedence left UNTIL,WEAK;
precedence right NEXT;
precedence right NEG;


start with formula;

formula ::= state_form:s SEMI {: RESULT = s; 
                              :}
         ; 

path_form ::= NEXT:n state_form:s {: RESULT = new Next(n, s); :}
           |  state_form:p UNTIL:u state_form:q {: RESULT = new Until(u, p, q); :}
           
           ;          

state_form ::= log_operation:l {: RESULT = l; :} 
            |   quantifier:q LPAREN path_form:p IMPLIESTEMP:i path_form:r  RPAREN {: RESULT = AuxiliarMethods.rewriteFormula(q, p, r);  :} 
            |   quantifier:q LPAREN path_form_extra:p RPAREN  {: RESULT = AuxiliarMethods.rewriteFormula(q,p);  :}       
	    ;

path_form_extra ::= path_form:p  {: RESULT = p; :}
                  | state_form:p WEAK:w state_form:q  {: RESULT = new Weak(w,p,q ); :}
                  ;

log_operation ::= conjunction:c {: RESULT = c; :} 
            | log_operation:p OR:o conjunction:q {: RESULT = new Disjunction(o, p, q);  :}	
	    ;

conjunction ::= implication:i {: RESULT = i; :} 
	    | conjunction:p AND:a implication:q {: RESULT = new Conjunction(a, p, q);  :}
	    ;

implication::= negation:n {: RESULT = n; :} 
           | implication:p IMPLIES:i negation:q {: RESULT = new Implication(i, p, q);  :}
           ;

negation ::= primary:p {: RESULT = p; :} 
           | NEG:n negation:p {: RESULT = new Negation( n , p);  :}  
           ;

primary ::= ID:i {: 	
                    RESULT = new Variable(i);  
                 :}
        | FALSE:t {: RESULT = new Constant(t,false);:}
        | TRUE:t {: RESULT = new Constant(t,true);:}
        |  LPAREN:d state_form:s RPAREN:i {: RESULT = s; :}  
        ;

quantifier ::= EXIST:e {: RESULT = e ; :}
            | FORALL:f {: RESULT = f ; :}
	    | PERMISSION:p {: RESULT = p ; :}      
	    | OBLIGATION:o {: RESULT = o ; :}
            | RECOVERY:r {: RESULT = r ;  :}
	    ;

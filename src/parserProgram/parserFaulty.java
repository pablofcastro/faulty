
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 12 09:02:47 ART 2017
//----------------------------------------------------

package parserProgram;

import java_cup.runtime.*;
import net.sf.javabdd.*;
import faulty.*;
import faulty.auxiliar.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 12 09:02:47 ART 2017
  */
public class parserFaulty extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserFaulty() {super();}

  /** Constructor which sets the default scanner. */
  public parserFaulty(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserFaulty(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\045\003\000\002\035" +
    "\012\000\002\035\010\000\002\035\010\000\002\035\006" +
    "\000\002\035\010\000\002\035\006\000\002\035\006\000" +
    "\002\035\004\000\002\052\003\000\002\052\005\000\002" +
    "\051\010\000\002\050\003\000\002\050\005\000\002\033" +
    "\003\000\002\033\005\000\002\032\006\000\002\031\003" +
    "\000\002\031\005\000\002\034\011\000\002\030\003\000" +
    "\002\030\004\000\002\024\007\000\002\024\012\000\002" +
    "\024\010\000\002\024\005\000\002\026\003\000\002\026" +
    "\005\000\002\027\005\000\002\025\014\000\002\025\012" +
    "\000\002\017\005\000\002\020\005\000\002\021\003\000" +
    "\002\021\005\000\002\022\005\000\002\023\003\000\002" +
    "\023\005\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\016\003\000\002\016\005\000\002\015\005" +
    "\000\002\014\003\000\002\014\005\000\002\013\005\000" +
    "\002\013\010\000\002\003\003\000\002\004\003\000\002" +
    "\004\005\000\002\005\003\000\002\005\005\000\002\007" +
    "\003\000\002\007\005\000\002\006\003\000\002\006\005" +
    "\000\002\006\005\000\002\010\003\000\002\010\005\000" +
    "\002\010\005\000\002\011\003\000\002\011\005\000\002" +
    "\011\005\000\002\012\003\000\002\012\004\000\002\012" +
    "\004\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\007\000\002\002\005\000" +
    "\002\042\010\000\002\043\006\000\002\041\003\000\002" +
    "\041\005\000\002\040\005\000\002\036\003\000\002\036" +
    "\005\000\002\037\006\000\002\037\007\000\002\046\003" +
    "\000\002\046\005\000\002\047\002\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\012\036\014\043\021\046\015\047\004\001" +
    "\002\000\004\053\302\001\002\000\004\017\262\001\002" +
    "\000\006\036\uffec\042\uffec\001\002\000\004\017\ufff7\001" +
    "\002\000\004\017\257\001\002\000\004\017\246\001\002" +
    "\000\004\002\000\001\002\000\004\017\ufff2\001\002\000" +
    "\004\053\077\001\002\000\004\053\043\001\002\000\004" +
    "\017\uffef\001\002\000\006\036\014\042\035\001\002\000" +
    "\004\002\033\001\002\000\004\053\022\001\002\000\004" +
    "\015\023\001\002\000\004\050\024\001\002\000\004\016" +
    "\025\001\002\000\004\037\026\001\002\000\010\032\032" +
    "\033\031\053\027\001\002\000\010\012\uffd8\017\uffd8\024" +
    "\uffd8\001\002\000\004\017\uffed\001\002\000\010\012\uffd9" +
    "\017\uffd9\024\uffd9\001\002\000\010\012\uffda\017\uffda\024" +
    "\uffda\001\002\000\004\002\001\001\002\000\004\002\ufff8" +
    "\001\002\000\004\011\037\001\002\000\006\036\uffeb\042" +
    "\uffeb\001\002\000\004\012\040\001\002\000\004\013\041" +
    "\001\002\000\004\053\043\001\002\000\004\014\073\001" +
    "\002\000\010\013\uffdc\020\uffdc\024\uffdc\001\002\000\004" +
    "\017\uffb5\001\002\000\004\017\053\001\002\000\006\020" +
    "\050\024\047\001\002\000\004\053\052\001\002\000\004" +
    "\053\051\001\002\000\004\017\uffb3\001\002\000\010\013" +
    "\uffdb\020\uffdb\024\uffdb\001\002\000\006\041\057\053\043" +
    "\001\002\000\004\017\uffb2\001\002\000\004\017\uffb4\001" +
    "\002\000\004\017\071\001\002\000\004\053\060\001\002" +
    "\000\004\011\061\001\002\000\010\012\064\024\uffac\053" +
    "\062\001\002\000\006\012\uffab\024\uffab\001\002\000\006" +
    "\012\067\024\066\001\002\000\004\017\uffb0\001\002\000" +
    "\006\012\uffae\024\uffae\001\002\000\010\012\uffac\024\uffac" +
    "\053\062\001\002\000\004\017\uffaf\001\002\000\006\012" +
    "\uffad\024\uffad\001\002\000\006\014\uffb6\041\057\001\002" +
    "\000\004\017\uffb1\001\002\000\004\002\uffb7\001\002\000" +
    "\006\020\075\024\047\001\002\000\010\032\032\033\031" +
    "\053\027\001\002\000\004\017\ufff0\001\002\000\010\011" +
    "\103\013\101\040\102\001\002\000\006\036\uffe7\042\uffe7" +
    "\001\002\000\006\034\124\053\043\001\002\000\004\053" +
    "\043\001\002\000\004\053\104\001\002\000\004\020\116" +
    "\001\002\000\006\012\110\024\107\001\002\000\006\012" +
    "\uffe6\024\uffe6\001\002\000\004\053\104\001\002\000\006" +
    "\013\101\040\112\001\002\000\006\036\uffe8\042\uffe8\001" +
    "\002\000\004\053\043\001\002\000\006\013\101\024\047" +
    "\001\002\000\006\036\uffe9\042\uffe9\001\002\000\006\012" +
    "\uffe5\024\uffe5\001\002\000\010\032\032\033\031\053\027" +
    "\001\002\000\006\012\uffe4\024\uffe4\001\002\000\006\013" +
    "\101\024\047\001\002\000\006\036\uffea\042\uffea\001\002" +
    "\000\004\017\235\001\002\000\004\017\uffdf\001\002\000" +
    "\004\020\233\001\002\000\006\020\231\024\047\001\002" +
    "\000\004\017\127\001\002\000\004\035\131\001\002\000" +
    "\004\017\205\001\002\000\004\020\132\001\002\000\020" +
    "\005\133\011\151\031\147\050\135\051\141\052\144\053" +
    "\145\001\002\000\020\005\133\011\151\031\147\050\135" +
    "\051\141\052\144\053\145\001\002\000\016\012\uffcf\017" +
    "\uffcf\021\uffcf\024\uffcf\025\uffcf\026\200\001\002\000\034" +
    "\004\uffbd\005\uffbd\006\uffbd\010\uffbd\012\uffbd\017\uffbd\021" +
    "\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\030\uffbd" +
    "\001\002\000\020\012\uffcb\017\uffcb\021\uffcb\023\202\024" +
    "\uffcb\025\uffcb\026\uffcb\001\002\000\034\004\uffc0\005\uffc0" +
    "\006\uffc0\010\uffc0\012\uffc0\017\uffc0\021\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\001\002\000\034" +
    "\004\uffc6\005\uffc6\006\170\010\167\012\uffc6\017\uffc6\021" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\001\002\000\034\004\uffbc\005\uffbc\006\uffbc\010\uffbc\012" +
    "\uffbc\017\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc" +
    "\027\uffbc\030\uffbc\001\002\000\014\012\uffd0\017\uffd0\021" +
    "\uffd0\024\uffd0\025\176\001\002\000\030\004\164\005\165" +
    "\012\uffc9\017\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026" +
    "\uffc9\027\163\030\162\001\002\000\034\004\uffbb\005\uffbb" +
    "\006\uffbb\010\uffbb\012\uffbb\017\uffbb\021\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\027\uffbb\030\uffbb\001\002\000\036" +
    "\004\uffba\005\uffba\006\uffba\007\156\010\uffba\012\uffba\017" +
    "\uffba\021\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\001\002\000\034\004\uffc3\005\uffc3\006\uffc3\010" +
    "\uffc3\012\uffc3\017\uffc3\021\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\001\002\000\020\005\133\011" +
    "\151\031\147\050\135\051\141\052\144\053\145\001\002" +
    "\000\004\017\uffe0\001\002\000\020\005\133\011\151\031" +
    "\147\050\135\051\141\052\144\053\145\001\002\000\016" +
    "\012\uffcd\017\uffcd\021\uffcd\024\uffcd\025\uffcd\026\uffcd\001" +
    "\002\000\004\012\154\001\002\000\034\004\uffb8\005\uffb8" +
    "\006\uffb8\010\uffb8\012\uffb8\017\uffb8\021\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\026\uffb8\027\uffb8\030\uffb8\001\002\000\034" +
    "\004\uffbf\005\uffbf\006\uffbf\010\uffbf\012\uffbf\017\uffbf\021" +
    "\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\001\002\000\004\045\157\001\002\000\004\011\160\001" +
    "\002\000\004\012\161\001\002\000\034\004\uffb9\005\uffb9" +
    "\006\uffb9\010\uffb9\012\uffb9\017\uffb9\021\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\027\uffb9\030\uffb9\001\002\000\020" +
    "\005\133\011\151\031\147\050\135\051\141\052\144\053" +
    "\145\001\002\000\020\005\133\011\151\031\147\050\135" +
    "\051\141\052\144\053\145\001\002\000\020\005\133\011" +
    "\151\031\147\050\135\051\141\052\144\053\145\001\002" +
    "\000\020\005\133\011\151\031\147\050\135\051\141\052" +
    "\144\053\145\001\002\000\034\004\uffc4\005\uffc4\006\170" +
    "\010\167\012\uffc4\017\uffc4\021\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\001\002\000\020\005\133" +
    "\011\151\031\147\050\135\051\141\052\144\053\145\001" +
    "\002\000\020\005\133\011\151\031\147\050\135\051\141" +
    "\052\144\053\145\001\002\000\034\004\uffc2\005\uffc2\006" +
    "\uffc2\010\uffc2\012\uffc2\017\uffc2\021\uffc2\023\uffc2\024\uffc2" +
    "\025\uffc2\026\uffc2\027\uffc2\030\uffc2\001\002\000\034\004" +
    "\uffc1\005\uffc1\006\uffc1\010\uffc1\012\uffc1\017\uffc1\021\uffc1" +
    "\023\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\001" +
    "\002\000\034\004\uffc5\005\uffc5\006\170\010\167\012\uffc5" +
    "\017\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\001\002\000\024\004\164\005\165\012\uffc7" +
    "\017\uffc7\021\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\001" +
    "\002\000\024\004\164\005\165\012\uffc8\017\uffc8\021\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\001\002\000\020\005" +
    "\133\011\151\031\147\050\135\051\141\052\144\053\145" +
    "\001\002\000\016\012\uffce\017\uffce\021\uffce\024\uffce\025" +
    "\uffce\026\200\001\002\000\020\005\133\011\151\031\147" +
    "\050\135\051\141\052\144\053\145\001\002\000\016\012" +
    "\uffcc\017\uffcc\021\uffcc\024\uffcc\025\uffcc\026\uffcc\001\002" +
    "\000\020\005\133\011\151\031\147\050\135\051\141\052" +
    "\144\053\145\001\002\000\016\012\uffca\017\uffca\021\uffca" +
    "\024\uffca\025\uffca\026\uffca\001\002\000\034\004\uffbe\005" +
    "\uffbe\006\uffbe\010\uffbe\012\uffbe\017\uffbe\021\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\001\002\000" +
    "\020\005\133\011\151\031\147\050\135\051\141\052\144" +
    "\053\145\001\002\000\004\017\uffd7\001\002\000\004\021" +
    "\214\001\002\000\004\017\211\001\002\000\022\005\133" +
    "\011\151\014\213\031\147\050\135\051\141\052\144\053" +
    "\145\001\002\000\004\017\uffd6\001\002\000\006\036\uffe2" +
    "\042\uffe2\001\002\000\004\053\215\001\002\000\006\007" +
    "\222\022\223\001\002\000\006\017\uffd5\024\220\001\002" +
    "\000\006\017\uffd4\024\uffd4\001\002\000\004\053\215\001" +
    "\002\000\006\017\uffd3\024\uffd3\001\002\000\004\044\225" +
    "\001\002\000\020\005\133\011\151\031\147\050\135\051" +
    "\141\052\144\053\145\001\002\000\006\017\uffd2\024\uffd2" +
    "\001\002\000\004\011\226\001\002\000\020\005\133\011" +
    "\151\031\147\050\135\051\141\052\144\053\145\001\002" +
    "\000\004\012\230\001\002\000\006\017\uffd1\024\uffd1\001" +
    "\002\000\010\032\032\033\031\053\027\001\002\000\004" +
    "\017\uffdd\001\002\000\020\005\133\011\151\031\147\050" +
    "\135\051\141\052\144\053\145\001\002\000\004\017\uffe1" +
    "\001\002\000\006\034\124\053\043\001\002\000\004\017" +
    "\uffde\001\002\000\004\017\240\001\002\000\004\035\131" +
    "\001\002\000\004\017\242\001\002\000\020\005\133\011" +
    "\151\031\147\050\135\051\141\052\144\053\145\001\002" +
    "\000\004\017\244\001\002\000\022\005\133\011\151\014" +
    "\245\031\147\050\135\051\141\052\144\053\145\001\002" +
    "\000\006\036\uffe3\042\uffe3\001\002\000\010\036\014\043" +
    "\021\046\015\001\002\000\004\017\ufff1\001\002\000\004" +
    "\017\253\001\002\000\006\036\014\042\035\001\002\000" +
    "\004\002\ufffc\001\002\000\006\036\014\043\021\001\002" +
    "\000\004\017\uffee\001\002\000\006\036\014\042\035\001" +
    "\002\000\004\002\ufffe\001\002\000\006\036\014\043\021" +
    "\001\002\000\006\036\014\042\035\001\002\000\004\002" +
    "\ufffa\001\002\000\012\036\014\043\021\046\015\047\004" +
    "\001\002\000\004\017\ufff6\001\002\000\004\017\277\001" +
    "\002\000\004\017\270\001\002\000\006\036\014\042\035" +
    "\001\002\000\004\002\ufff9\001\002\000\010\036\014\043" +
    "\021\046\015\001\002\000\004\017\274\001\002\000\006" +
    "\036\014\042\035\001\002\000\004\002\ufffd\001\002\000" +
    "\006\036\014\043\021\001\002\000\006\036\014\042\035" +
    "\001\002\000\004\002\uffff\001\002\000\006\036\014\043" +
    "\021\001\002\000\006\036\014\042\035\001\002\000\004" +
    "\002\ufffb\001\002\000\004\022\303\001\002\000\004\013" +
    "\304\001\002\000\004\053\305\001\002\000\006\014\ufff4" +
    "\024\ufff4\001\002\000\006\014\310\024\307\001\002\000" +
    "\004\053\311\001\002\000\004\017\ufff5\001\002\000\006" +
    "\014\ufff3\024\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\026\024\005\030\016\031\007\032\012\033" +
    "\010\034\015\035\011\045\017\051\006\052\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\073\001\001\000\002\001\001\000\006\024\035\042\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\045\040\043" +
    "\041\044\043\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\045\036\055\037\053\040\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\046\062" +
    "\047\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\044\075\001\001\000\002\001\001\000\004\025" +
    "\077\001\001\000\002\001\001\000\012\017\125\021\121" +
    "\022\122\023\124\001\001\000\004\023\117\001\001\000" +
    "\006\026\104\027\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\027\114\001\001\000" +
    "\004\025\110\001\001\000\002\001\001\000\004\023\112" +
    "\001\001\000\004\025\113\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\116\001\001\000\002\001\001" +
    "\000\004\025\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\136\003\147\004\141" +
    "\005\133\006\135\007\151\010\142\011\137\012\145\001" +
    "\001\000\006\002\136\012\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\136\012\154\001\001\000\002\001\001" +
    "\000\024\002\136\003\152\004\141\005\133\006\135\007" +
    "\151\010\142\011\137\012\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\136\010\174\011\137\012\145\001" +
    "\001\000\012\002\136\010\173\011\137\012\145\001\001" +
    "\000\010\002\136\011\172\012\145\001\001\000\010\002" +
    "\136\011\165\012\145\001\001\000\002\001\001\000\006" +
    "\002\136\012\171\001\001\000\006\002\136\012\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\136\005" +
    "\176\006\135\007\151\010\142\011\137\012\145\001\001" +
    "\000\002\001\001\000\016\002\136\006\135\007\200\010" +
    "\142\011\137\012\145\001\001\000\002\001\001\000\014" +
    "\002\136\006\202\010\142\011\137\012\145\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\002\136\003\206" +
    "\004\141\005\133\006\135\007\151\010\142\011\137\012" +
    "\145\015\205\016\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\002\136\003\206\004" +
    "\141\005\133\006\135\007\151\010\142\011\137\012\145" +
    "\015\211\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\216\014\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\136\003\223" +
    "\004\141\005\133\006\135\007\151\010\142\011\137\012" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\136\003\226\004\141\005\133\006\135\007\151\010" +
    "\142\011\137\012\145\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\231\001\001\000\002\001\001\000" +
    "\024\002\136\003\233\004\141\005\133\006\135\007\151" +
    "\010\142\011\137\012\145\001\001\000\002\001\001\000" +
    "\010\017\236\022\235\023\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\240\001\001\000\002\001" +
    "\001\000\030\002\136\003\206\004\141\005\133\006\135" +
    "\007\151\010\142\011\137\012\145\015\205\016\242\001" +
    "\001\000\002\001\001\000\026\002\136\003\206\004\141" +
    "\005\133\006\135\007\151\010\142\011\137\012\145\015" +
    "\211\001\001\000\002\001\001\000\014\024\005\030\250" +
    "\031\247\032\246\034\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\024\035\042\251\001\001\000\002" +
    "\001\001\000\010\024\005\030\254\034\253\001\001\000" +
    "\002\001\001\000\006\024\035\042\255\001\001\000\002" +
    "\001\001\000\010\024\005\030\257\034\253\001\001\000" +
    "\006\024\035\042\260\001\001\000\002\001\001\000\020" +
    "\024\005\030\265\031\263\032\012\033\264\034\015\051" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\024\035\042\266\001\001\000\002\001" +
    "\001\000\014\024\005\030\271\031\270\032\246\034\015" +
    "\001\001\000\002\001\001\000\006\024\035\042\272\001" +
    "\001\000\002\001\001\000\010\024\005\030\274\034\253" +
    "\001\001\000\006\024\035\042\275\001\001\000\002\001" +
    "\001\000\010\024\005\030\277\034\253\001\001\000\006" +
    "\024\035\042\300\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\050\305\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserFaulty$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserFaulty$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserFaulty$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
    public void syntax_error(Symbol s){
        System.err.println("\n\nSyntax Error - line: " +  (s.left+1) +  " - value:" + s.value);
        
    }


    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {    
         System.err.println("\n\nUnrecovered Syntax error line: " +  (s.left+1) +  " - value:" + s.value);
    }
                                 	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserFaulty$actions {
  private final parserFaulty parser;

  /** Constructor */
  CUP$parserFaulty$actions(parserFaulty parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserFaulty$do_action(
    int                        CUP$parserFaulty$act_num,
    java_cup.runtime.lr_parser CUP$parserFaulty$parser,
    java.util.Stack            CUP$parserFaulty$stack,
    int                        CUP$parserFaulty$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserFaulty$result;

      /* select the action based on the action number */
      switch (CUP$parserFaulty$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // invkParam ::= ID 
            {
              AuxiliarExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  AuxiliarVar value = new AuxiliarVar(id);
                       RESULT= value;
                    
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("invkParam",37, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // invkParam ::= 
            {
              AuxiliarExpression RESULT =null;

              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("invkParam",37, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // invkParamList ::= invkParamList COMMA invkParam 
            {
              LinkedList<AuxiliarExpression> RESULT =null;
		int listInvkleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listInvkright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarExpression> listInvk = (LinkedList<AuxiliarExpression>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression par = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 listInvk.add(par);
                                                 RESULT = listInvk;
    
                                              
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("invkParamList",36, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // invkParamList ::= invkParam 
            {
              LinkedList<AuxiliarExpression> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression par = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		
                                    LinkedList<AuxiliarExpression> listInvk = new LinkedList<AuxiliarExpression>();
                                    listInvk.add(par);
                                    RESULT = listInvk;
                           
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("invkParamList",36, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // invk ::= RUN ID LPARENT invkParamList RPARENT 
            {
              AuxiliarInvkProcess RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		LinkedList<AuxiliarExpression> listP = (LinkedList<AuxiliarExpression>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		
                                                    RESULT = new AuxiliarInvkProcess(id,listP);
                                                
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("invk",29, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // invk ::= RUN ID LPARENT RPARENT 
            {
              AuxiliarInvkProcess RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		
                                      RESULT = new AuxiliarInvkProcess(id);
                                   
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("invk",29, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // processInvk ::= processInvk SEMICOLON invk 
            {
              LinkedList<AuxiliarInvkProcess> RESULT =null;
		int listInvkleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listInvkright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarInvkProcess> listInvk = (LinkedList<AuxiliarInvkProcess>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int infoProcleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int infoProcright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarInvkProcess infoProc = (AuxiliarInvkProcess)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 listInvk.add(infoProc);
                                                                  RESULT = listInvk;
                        
                                                               
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("processInvk",28, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // processInvk ::= invk 
            {
              LinkedList<AuxiliarInvkProcess> RESULT =null;
		int infoProcleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int infoProcright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarInvkProcess infoProc = (AuxiliarInvkProcess)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		
                                 LinkedList<AuxiliarInvkProcess> listInvk = new LinkedList<AuxiliarInvkProcess>();
                                 listInvk.add(infoProc);
                                 RESULT = listInvk;
                              
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("processInvk",28, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // proc ::= varDecls COLON ID 
            {
              LinkedList<AuxiliarProcessDecl> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int typeProcleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int typeProcright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		String typeProc = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  LinkedList<AuxiliarProcessDecl> listProcess = new LinkedList<AuxiliarProcessDecl>();
                                              AuxiliarProcessDecl p;
                                              for (int i = 0; i < listNames.size(); i++){
                                                    p= new AuxiliarProcessDecl( listNames.get(i) , typeProc);
                                                    listProcess.add(p);
                                                   
                                               }

                                             RESULT = listProcess;
                                          
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("proc",30, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // processDecl ::= processDecl SEMICOLON proc 
            {
              LinkedList<AuxiliarProcessDecl> RESULT =null;
		int listProcessleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listProcessright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarProcessDecl> listProcess = (LinkedList<AuxiliarProcessDecl>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		LinkedList<AuxiliarProcessDecl> lp = (LinkedList<AuxiliarProcessDecl>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  for (int i = 0; i < lp.size(); i++){
                                                                  listProcess.add(lp.get(i));
                                                              }
                                                              RESULT = listProcess;
                                                          
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("processDecl",31, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // processDecl ::= proc 
            {
              LinkedList<AuxiliarProcessDecl> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		LinkedList<AuxiliarProcessDecl> lp = (LinkedList<AuxiliarProcessDecl>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  LinkedList<AuxiliarProcessDecl> listProcess = new LinkedList<AuxiliarProcessDecl>();
                            for (int i = 0; i < lp.size(); i++){
                               listProcess.add(lp.get(i));
                                                   
                            }
                            RESULT = listProcess;
                        
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("processDecl",31, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // body ::= processDecl SEMICOLON processInvk SEMICOLON 
            {
              AuxiliarMain RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		LinkedList<AuxiliarProcessDecl> declList = (LinkedList<AuxiliarProcessDecl>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int invkListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int invkListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		LinkedList<AuxiliarInvkProcess> invkList = (LinkedList<AuxiliarInvkProcess>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		  AuxiliarMain main = new AuxiliarMain(declList,invkList); 
                                                                           RESULT=main; 
                                                                        
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("body",33, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // program ::= MAIN LPARENT RPARENT LBRACE body RBRACE 
            {
              AuxiliarMain RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarMain m = (AuxiliarMain)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		 RESULT= m; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("program",32, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // primary ::= LPARENT expr RPARENT 
            {
              AuxiliarExpression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarExpression ex = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		 
                                       RESULT = ex;
                                    
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // primary ::= ID POINT GET LPARENT RPARENT 
            {
              AuxiliarExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).value;
		 
                                              AuxiliarChanAccess chanAcc = new AuxiliarChanAccess(id);
                                              RESULT = chanAcc; 
                                            
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // primary ::= ID 
            {
              AuxiliarExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 
                    AuxiliarVar value = new AuxiliarVar(id);
                    RESULT= value; 
                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // primary ::= FALSE 
            {
              AuxiliarExpression RESULT =null;
		  AuxiliarConsBoolExp value = new AuxiliarConsBoolExp(false);
                      RESULT = value;
                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // primary ::= TRUE 
            {
              AuxiliarExpression RESULT =null;
		    AuxiliarConsBoolExp value = new AuxiliarConsBoolExp(true);
                       RESULT = value;
                   
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // primary ::= INTEGER 
            {
              AuxiliarExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  AuxiliarConsIntExp value = new AuxiliarConsIntExp(v);
                           RESULT = value;
                       
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // factor ::= MINUS factor 
            {
              AuxiliarExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression value = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarConsIntExp zero = new AuxiliarConsIntExp(new Integer(0));
                                   AuxiliarNegIntExp expr = new AuxiliarNegIntExp(zero,value); 
                                   RESULT = expr;
                                
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // factor ::= EXCLAMATION factor 
            {
              AuxiliarExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression value = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarNegBoolExp expr = new AuxiliarNegBoolExp(value); 
                                        RESULT = expr;
                                     
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // factor ::= primary 
            {
              AuxiliarExpression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 RESULT = op;
                       
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // term ::= term SLASH factor 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarDivIntExp expr = new AuxiliarDivIntExp(op1,op2); 
                                         RESULT = expr;
                                       
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // term ::= term ASTERISK factor 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarMultIntExp expr = new AuxiliarMultIntExp(op1,op2); 
                                            RESULT = expr;
                                         
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // term ::= factor 
            {
              AuxiliarExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression val = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  RESULT = val; 
                        
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // addition ::= addition MINUS term 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarNegIntExp expr = new AuxiliarNegIntExp(op1,op2); 
                                               RESULT = expr;
                                            
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // addition ::= addition PLUS term 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarSumIntExp expr = new AuxiliarSumIntExp(op1,op2); 
                                              RESULT = expr;
                                           
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // addition ::= term 
            {
              AuxiliarExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression val = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  RESULT = val; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // relation ::= addition GT addition 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarGreaterBoolExp expr = new AuxiliarGreaterBoolExp(op1,op2); 
                                                RESULT = expr;
                                             
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // relation ::= addition LT addition 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarLessBoolExp expr = new AuxiliarLessBoolExp(op1,op2); 
                                                RESULT = expr;
                                             
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // relation ::= addition 
            {
              AuxiliarExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression val = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  RESULT = val; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // comparison ::= relation DOUBLE_EQUAL relation 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarEqBoolExp expr = new AuxiliarEqBoolExp(op1,op2); 
                                                           RESULT = expr;
                                                        
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("comparison",5, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // comparison ::= relation 
            {
              AuxiliarExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression val = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  RESULT = val; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("comparison",5, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // conjunction ::= conjunction AND comparison 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarAndBoolExp expr = new AuxiliarAndBoolExp(op1,op2); 
                                                      RESULT = expr;
                                                   
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("conjunction",3, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // conjunction ::= comparison 
            {
              AuxiliarExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression val = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  RESULT = val; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("conjunction",3, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // disjunction ::= disjunction OR conjunction 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarOrBoolExp expr = new AuxiliarOrBoolExp(op1,op2); 
                                                      RESULT = expr;
                                                   
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("disjunction",2, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // disjunction ::= conjunction 
            {
              AuxiliarExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression val = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 RESULT = val; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("disjunction",2, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= disjunction 
            {
              AuxiliarExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression val = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  RESULT = val; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // assignation ::= ID POINT PUT LPARENT expr RPARENT 
            {
              AuxiliarCode RESULT =null;
		int nameChleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).left;
		int nameChright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).right;
		String nameCh = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarExpression value = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		 RESULT = new AuxiliarChanAssign(nameCh, value); 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("assignation",9, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assignation ::= ID EQUAL expr 
            {
              AuxiliarCode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression value = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		   
                                           AuxiliarVar var = new AuxiliarVar(i);
                                           RESULT = new AuxiliarVarAssign(var,value);
                                      
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("assignation",9, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assigList ::= assigList COMMA assignation 
            {
              LinkedList<AuxiliarCode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarCode> list = (LinkedList<AuxiliarCode>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarCode assign = (AuxiliarCode)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 list.add(assign);
                                                          RESULT = list;
                                                       
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("assigList",10, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // assigList ::= assignation 
            {
              LinkedList<AuxiliarCode> RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarCode assign = (AuxiliarCode)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 LinkedList<AuxiliarCode> list = new LinkedList<AuxiliarCode>();
                                     list.add(assign);
                                     RESULT = list; 
                                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("assigList",10, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // branch ::= expr RIGHTARROW assigList 
            {
              AuxiliarBranch RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression e = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		LinkedList<AuxiliarCode> list = (LinkedList<AuxiliarCode>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		   //ListAssign l = new ListAssign(list);
                                                  AuxiliarBranch b = new AuxiliarBranch(e,list,false);
                                                  RESULT = b;
                                             
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("branch",11, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // branchList ::= branchList SEMICOLON branch 
            {
              LinkedList<AuxiliarBranch> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarBranch> list = (LinkedList<AuxiliarBranch>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarBranch b = (AuxiliarBranch)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 list.add(b);
                                                       RESULT = list;
                                                    
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("branchList",12, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // branchList ::= branch 
            {
              LinkedList<AuxiliarBranch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarBranch b = (AuxiliarBranch)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  LinkedList<AuxiliarBranch> list = new LinkedList<AuxiliarBranch>();
                             list.add(b);
                             RESULT = list; 
                         
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("branchList",12, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type ::= ID 
            {
              Type RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 Type t = Type.ENUMERATED;
                       t.setStringValue(name);
                       RESULT = t; 
                    
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = Type.BOOL; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = Type.INT; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("type",34, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // varDecls ::= varDecls COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 list.add(i);
                                          RESULT = list;
                                       
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("varDecls",17, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // varDecls ::= ID 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  LinkedList<String> list = new LinkedList<String>();
                       list.add(i);
                       RESULT = list; 
                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("varDecls",17, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // decl ::= varDecls COLON type 
            {
              LinkedList<AuxiliarVar> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  LinkedList<AuxiliarVar> list = new LinkedList<AuxiliarVar>();
                                             AuxiliarVar v;
                                             
                                             if ( t.isINT() ){
                                                
                                                 for (int i = 0; i < listNames.size(); i++){
                                                    v = new AuxiliarVar(listNames.get(i), Type.INT);
                                                    list.add(v);
                                                  }
                                              }
                                              else{
                                                 if ( t.isBOOLEAN() ){
                                                 
                                                    for (int i = 0; i < listNames.size(); i++){
                                                        v = new AuxiliarVar(listNames.get(i), Type.BOOL);
                                                        list.add(v);
                                                     }
                                                  }
                                                  else{
                                                     for (int i = 0; i < listNames.size(); i++){
                                                        v = new AuxiliarVar(listNames.get(i), t ); // Enumerated!
                                                        list.add(v);
                                                     }

                                                  }
                                              }
        	                                    
                                              
                                              RESULT = list;
                                          
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("decl",16, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declList ::= declList SEMICOLON decl 
            {
              LinkedList<AuxiliarVar> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarVar> list = (LinkedList<AuxiliarVar>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		LinkedList<AuxiliarVar> listD = (LinkedList<AuxiliarVar>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 for (int i = 0; i < listD.size(); i++){
        	                                            list.add(listD.get(i));
                                                     }
                                                     RESULT = list;
                                                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("declList",15, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declList ::= decl 
            {
              LinkedList<AuxiliarVar> RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		LinkedList<AuxiliarVar> listD = (LinkedList<AuxiliarVar>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  
                             LinkedList<AuxiliarVar> list = new LinkedList<AuxiliarVar>();
                             for (int i = 0; i < listD.size(); i++){
        	                    list.add(listD.get(i));
                             }
                             RESULT = list; 
                        
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("declList",15, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // normCond ::= NORMATIVE COLON expr 
            {
              AuxiliarExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression e = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 RESULT = e; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("normCond",14, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // initialCond ::= INIT COLON expr 
            {
              AuxiliarExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression e = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 RESULT = e;  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("initialCond",13, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bodyProcess ::= LBRACE initialCond SEMICOLON normCond SEMICOLON branchList SEMICOLON RBRACE 
            {
              AuxiliarProcess RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).right;
		AuxiliarExpression init = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).value;
		int normleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).left;
		int normright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).right;
		AuxiliarExpression norm = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).value;
		int listBleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listBright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarBranch> listB = (LinkedList<AuxiliarBranch>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		 AuxiliarProcess proc = new AuxiliarProcess(init,norm,listB);
                                                                                                                                         RESULT = proc;
                                                                                                                                          
                                                                                                                                      
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("bodyProcess",19, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-7)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bodyProcess ::= LBRACE declList SEMICOLON initialCond SEMICOLON normCond SEMICOLON branchList SEMICOLON RBRACE 
            {
              AuxiliarProcess RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-8)).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-8)).right;
		LinkedList<AuxiliarVar> listD = (LinkedList<AuxiliarVar>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-8)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).right;
		AuxiliarExpression init = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).value;
		int normleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).left;
		int normright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).right;
		AuxiliarExpression norm = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).value;
		int listBleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listBright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarBranch> listB = (LinkedList<AuxiliarBranch>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		 AuxiliarProcess proc = new AuxiliarProcess(init,norm,listD,listB);
                                                                                                                                         RESULT = proc;
                                                                                                                                          
                                                                                                                                      
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("bodyProcess",19, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-9)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // param ::= ID COLON type 
            {
              AuxiliarParam RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  AuxiliarParam p;
                                             
                                   if ( t.isINT() ){
                                      p = new AuxiliarParam(name, Type.INT);
                                                  
                                   }
                                   else{
                                      if ( t.isBOOLEAN() ){
                                          p = new AuxiliarParam(name, Type.BOOL);
                                      }
                                      else{
                                         p = new AuxiliarParam(name, t);
                                      }
                                   }
                                                    
                                   RESULT = p;
                               
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("param",21, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // paramList ::= paramList COMMA param 
            {
              LinkedList<AuxiliarParam> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarParam> list = (LinkedList<AuxiliarParam>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarParam p = (AuxiliarParam)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  
                                                list.add(p);
                                                RESULT = list;
                                            
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("paramList",20, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // paramList ::= param 
            {
              LinkedList<AuxiliarParam> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarParam p = (AuxiliarParam)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		
                             LinkedList<AuxiliarParam> list = new LinkedList<AuxiliarParam>();
                             list.add(p);
                             RESULT = list; 
                      
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("paramList",20, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // process ::= PROCESS ID bodyProcess 
            {
              AuxiliarProcess RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarProcess proc = (AuxiliarProcess)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 proc.setName(name);
                                                                 RESULT = proc;
                                                              
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("process",18, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // process ::= PROCESS ID LPARENT paramList RPARENT bodyProcess 
            {
              AuxiliarProcess RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarParam> listP = (LinkedList<AuxiliarParam>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarProcess proc = (AuxiliarProcess)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 proc.setName(name);
                                                                                                     proc.setParamList(listP);
                                                                                                     RESULT = proc;
                                                                                                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("process",18, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // process ::= PROCESS ID LPARENT paramList RPARENT USES varDecls bodyProcess 
            {
              AuxiliarProcess RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).value;
		int listPleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).left;
		int listPright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).right;
		LinkedList<AuxiliarParam> listP = (LinkedList<AuxiliarParam>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).value;
		int listCleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int listCright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		LinkedList<String> listC = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarProcess proc = (AuxiliarProcess)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 proc.setName(name);
                                                                                                     proc.setChannelIds(listC);
                                                                                                     proc.setParamList(listP);
                                                                                                     RESULT = proc;
                                                                                                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("process",18, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-7)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // process ::= PROCESS ID USES varDecls bodyProcess 
            {
              AuxiliarProcess RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int listCleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int listCright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		LinkedList<String> listC = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarProcess proc = (AuxiliarProcess)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 proc.setName(name);
                                                                                     proc.setChannelIds(listC);
                                                                                     RESULT = proc;  
                                                                                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("process",18, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // processList ::= processList process 
            {
              AuxiliarProcessCollection RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProcessCollection list = (AuxiliarProcessCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarProcess p = (AuxiliarProcess)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 list.addProcess(p);
                                               RESULT = list; 
                                            
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("processList",22, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // processList ::= process 
            {
              AuxiliarProcessCollection RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarProcess p = (AuxiliarProcess)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 
                                  AuxiliarProcessCollection list = new AuxiliarProcessCollection();
                                  list.addProcess(p);
                                  RESULT = list; 
                            
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("processList",22, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // chanDecl ::= CHANNEL ID LBRACKET INTEGER RBRACKET OF type 
            {
              AuxiliarChannel RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  
                                                                           if (t.isINT()){
                                                                               RESULT = new AuxiliarChannel( name, size , Type.INT);
                                                                           }
                                                                           else{
                                                                               if (t.isBOOLEAN()){
                                                                                   RESULT = new AuxiliarChannel( name, size, Type.BOOL);
                                                                               }
                                                                               else{
                                                                                   RESULT = new AuxiliarChannel( name, size, t);
                                                                               
                                                                               }
                                                                           }
                                                                        
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("chanDecl",26, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // channelList ::= channelList SEMICOLON chanDecl 
            {
              AuxiliarChannelCollection RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarChannelCollection list = (AuxiliarChannelCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarChannel c = (AuxiliarChannel)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 
                                                          if(c.getType().isBOOLEAN()){
                                                             list.addBoolChannel(c);
                                                          }
                                                          else{
                                                              if(c.getType().isINT()){
                                                                  list.addIntChannel(c);
                                                              }else{
                                                                  list.addEnumChannel(c);
                                                              }
                                                          }
                                                          RESULT = list; 
                                                       
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("channelList",23, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // channelList ::= chanDecl 
            {
              AuxiliarChannelCollection RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarChannel c = (AuxiliarChannel)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		     AuxiliarChannelCollection list = new AuxiliarChannelCollection();
                                  if(c.getType().isBOOLEAN()){
                                      list.addBoolChannel(c);
                                  }
                                  else{
                                       if(c.getType().isINT()){
                                           list.addIntChannel(c);
                                       }
                                       else{
                                           list.addEnumChannel(c);
                                       }
                                  }
                                 
                                  RESULT = list; 
                           
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("channelList",23, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // globalDecl ::= GLOBAL varDecls COLON type 
            {
              LinkedList<AuxiliarVar> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  LinkedList<AuxiliarVar> list = new LinkedList<AuxiliarVar>();
                                                          AuxiliarVar v;
                                             
                                                          if ( t.isINT() ){
                                                             for (int i = 0; i < listNames.size(); i++){
                                                                 v = new AuxiliarVar(listNames.get(i), Type.INT);
                                                                 list.add(v);
                                                             }
                                                          }
                                                          else{
                                                              if ( t.isBOOLEAN() ){
                                                                  for (int i = 0; i < listNames.size(); i++){
                                                                     v = new AuxiliarVar(listNames.get(i), Type.BOOL);
                                                                     list.add(v);
                                                                  }
                                                              }
                                                              else{
                                                                  for (int i = 0; i < listNames.size(); i++){
                                                                     v = new AuxiliarVar(listNames.get(i), t);
                                                                     list.add(v);
                                                                  }

                                                              }
                                                          }

        	                                           RESULT = list;
                                                      
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("globalDecl",24, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // globalVarList ::= globalVarList SEMICOLON globalDecl 
            {
              AuxiliarGlobalVarCollection RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarGlobalVarCollection list = (AuxiliarGlobalVarCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		LinkedList<AuxiliarVar> listD = (LinkedList<AuxiliarVar>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarVar var;
                                                                    for (int i = 0; i < listD.size(); i++){
                                                                       var = listD.get(i);
                                                                       if(var.getType().isINT()){
                                                                           list.addGlobalIntVar(var);
                                                                       }
                                                                       else{
                                                                           if(var.getType().isBOOLEAN()){
                                                                               list.addGlobalBoolVar(var);
                                                                           }
                                                                           else{
                                                                               list.addGlobalEnumVar(var);
                                                                           }
                                                                       }
                                                                    }
                                                                    RESULT = list;
                                                                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("globalVarList",25, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // globalVarList ::= globalDecl 
            {
              AuxiliarGlobalVarCollection RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		LinkedList<AuxiliarVar> listD = (LinkedList<AuxiliarVar>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  
                                         AuxiliarGlobalVarCollection list = new AuxiliarGlobalVarCollection();
                                         AuxiliarVar var;
                                         for (int i = 0; i < listD.size(); i++){
                                            var = listD.get(i);
                                            if(var.getType().isINT()){
                                                list.addGlobalIntVar(var);
                                            }
                                            else{
                                                if(var.getType().isBOOLEAN()){
                                                    list.addGlobalBoolVar(var);
                                                }
                                                else{
                                                    list.addGlobalEnumVar(var);
                                                }
                                            }
                                         }
                                         RESULT = list; 
                                     
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("globalVarList",25, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constantDecls ::= constantDecls COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 list.add(i);
                                               RESULT = list;
                                            
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("constantDecls",38, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constantDecls ::= ID 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  LinkedList<String> list = new LinkedList<String>();
                             list.add(i);
                             RESULT = list; 
                         
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("constantDecls",38, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // enumDecl ::= ENUM ID EQUAL LBRACE constantDecls RBRACE 
            {
              AuxiliarEnumType RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).value;
		int constListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int constListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		LinkedList<String> constList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		 AuxiliarEnumType  enumT = new AuxiliarEnumType(name, constList.size() );
                                                                         for (int i = 0; i < constList.size(); i++){
                                                                              enumT.addCons(constList.get(i),i);
                                                                         }
                                                                         RESULT = enumT;
                                                                      
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("enumDecl",39, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // enumList ::= enumList SEMICOLON enumDecl 
            {
              LinkedList<AuxiliarEnumType> RESULT =null;
		int listEleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listEright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarEnumType> listE = (LinkedList<AuxiliarEnumType>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int enumTleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int enumTright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarEnumType enumT = (AuxiliarEnumType)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 listE.add(enumT);
                                                            RESULT = listE;
                                                         
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("enumList",40, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // enumList ::= enumDecl 
            {
              LinkedList<AuxiliarEnumType> RESULT =null;
		int enumTleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int enumTright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarEnumType enumT = (AuxiliarEnumType)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 LinkedList<AuxiliarEnumType> listE = new LinkedList<AuxiliarEnumType>();
                                 listE.add(enumT);
                                 RESULT = listE;  
                              
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("enumList",40, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // specification ::= processList program 
            {
              AuxiliarProgram RESULT =null;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProcessCollection pList = (AuxiliarProcessCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarMain main = (AuxiliarMain)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  // not EnumTypes & not GlobalVars & not Channels
                                                         AuxiliarProgram prog = new AuxiliarProgram(pList, main);
                                                         RESULT = prog;
                                                     
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("specification",27, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // specification ::= enumList SEMICOLON processList program 
            {
              AuxiliarProgram RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		LinkedList<AuxiliarEnumType> eList = (LinkedList<AuxiliarEnumType>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProcessCollection pList = (AuxiliarProcessCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarMain main = (AuxiliarMain)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  // EnumTypes
                                                                        AuxiliarProgram prog = new AuxiliarProgram(eList, pList, main);
                                                                        RESULT = prog;
                                                                    
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("specification",27, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // specification ::= channelList SEMICOLON processList program 
            {
              AuxiliarProgram RESULT =null;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		AuxiliarChannelCollection cList = (AuxiliarChannelCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProcessCollection pList = (AuxiliarProcessCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarMain main = (AuxiliarMain)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 // Channels
                                                                                   AuxiliarProgram prog = new AuxiliarProgram(cList,pList, main);
                                                                                   RESULT = prog;
                                                                                
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("specification",27, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // specification ::= enumList SEMICOLON channelList SEMICOLON processList program 
            {
              AuxiliarProgram RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).right;
		LinkedList<AuxiliarEnumType> eList = (LinkedList<AuxiliarEnumType>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).value;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		AuxiliarChannelCollection cList = (AuxiliarChannelCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProcessCollection pList = (AuxiliarProcessCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarMain main = (AuxiliarMain)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 // EnumTypes + Channels
                                                                                   AuxiliarProgram prog = new AuxiliarProgram(eList, cList,pList, main);
                                                                                   RESULT = prog;
                                                                                
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("specification",27, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // specification ::= globalVarList SEMICOLON processList program 
            {
              AuxiliarProgram RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		AuxiliarGlobalVarCollection vList = (AuxiliarGlobalVarCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProcessCollection pList = (AuxiliarProcessCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarMain main = (AuxiliarMain)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 // GlobalVars
                                                                                    AuxiliarProgram prog = new AuxiliarProgram(vList,pList, main);
                                                                                    RESULT = prog;
                                                                                 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("specification",27, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // specification ::= enumList SEMICOLON globalVarList SEMICOLON processList program 
            {
              AuxiliarProgram RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).right;
		LinkedList<AuxiliarEnumType> eList = (LinkedList<AuxiliarEnumType>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		AuxiliarGlobalVarCollection vList = (AuxiliarGlobalVarCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProcessCollection pList = (AuxiliarProcessCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarMain main = (AuxiliarMain)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 // EnumTypes + GlobalVars
                                                                                                   AuxiliarProgram prog = new AuxiliarProgram(eList,vList,pList, main);
                                                                                                   RESULT = prog;
                                                                                                
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("specification",27, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // specification ::= globalVarList SEMICOLON channelList SEMICOLON processList program 
            {
              AuxiliarProgram RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).right;
		AuxiliarGlobalVarCollection vList = (AuxiliarGlobalVarCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).value;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		AuxiliarChannelCollection cList = (AuxiliarChannelCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProcessCollection pList = (AuxiliarProcessCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarMain main = (AuxiliarMain)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 // GlobalVars + Channels
                                                                                                   AuxiliarProgram prog = new AuxiliarProgram(vList,cList,pList, main);
                                                                                                   RESULT = prog;
                                                                                                
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("specification",27, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // specification ::= enumList SEMICOLON globalVarList SEMICOLON channelList SEMICOLON processList program 
            {
              AuxiliarProgram RESULT =null;
		int eListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-7)).left;
		int eListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-7)).right;
		LinkedList<AuxiliarEnumType> eList = (LinkedList<AuxiliarEnumType>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-7)).value;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).right;
		AuxiliarGlobalVarCollection vList = (AuxiliarGlobalVarCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).value;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		AuxiliarChannelCollection cList = (AuxiliarChannelCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProcessCollection pList = (AuxiliarProcessCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarMain main = (AuxiliarMain)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 // EnumTypes + GlobalVars + Channels
                                                                                                   AuxiliarProgram prog = new AuxiliarProgram(eList,vList,cList,pList, main);
                                                                                                   RESULT = prog;
                                                                                                
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("specification",27, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-7)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // mainSpecification ::= specification 
            {
              AuxiliarProgram RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarProgram prog = (AuxiliarProgram)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 RESULT = prog;
                                         
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("mainSpecification",35, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= mainSpecification EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProgram start_val = (AuxiliarProgram)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		RESULT = start_val;
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserFaulty$parser.done_parsing();
          return CUP$parserFaulty$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


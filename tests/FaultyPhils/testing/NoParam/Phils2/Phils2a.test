// This version of the faulty philosophers use only two bits to codify the state
// of a philosopher, this reduces the state space of the examples
// a enumeration type will be added in next versions of the tool
// !s0!s1 : thinking
// !s0 s1: hungry
// s0!s1: eating
// s0s1: faulty

Global fork0 : BOOL;
Global fork1 : BOOL;


Process Phil1{
   s0, s1, hasL, hasR: BOOL;
   Initial: !s0 && !s1  && !hasL && !hasR && fork0 && fork1;
   Normative: !(s0 && s1); 

   !s0 && !s1 -> s0=false, s1=true; 
   !s0 && !s1 -> s0=false, s1=false; 
   !s0 && s1 && fork1 && !hasL && !hasR  -> fork1=false, hasL=true;
   !s0 && s1 && !fork1 && !hasL && !hasR -> s0=s0,s1=s1; 
   !s0 && s1 && hasL && fork0 && !hasR -> fork0=false, hasR=true;
   !s0 && s1 && hasL && !fork0 && !hasR -> fork1 = true, hasL=false;  
   !s0 && s1 && hasL && hasR -> s0=true, s1=false;
   s0 && !s1 -> s0=false, s1=false, fork0=true, fork1=true, hasR=false, hasL=false;
   true -> s0=true, s1=true;     
}

Process Phil2{
   
   s0, s1, hasL, hasR: BOOL;
   Initial: !s0 && !s1  && !hasL && !hasR && fork0 && fork1;
   Normative: !(s0 && s1); 


   !s0 && !s1 -> s0=false, s1=true; 
   !s0 && !s1 -> s0=false, s1=false; 
   !s0 && s1 && fork1 && !hasR && !hasL  -> fork1=false, hasR=true; 
   !s0 && s1 && !fork1 && !hasL && !hasR -> s0=s0, s1=s1;
   !s0 && s1 && hasR && fork0 && !hasL -> fork0=false, hasL=true;  
   !s0 && s1 && hasR && !fork0 && !hasL -> fork1=true, hasR=false;
   !s0 && s1 && hasL && hasR -> s0=true, s1=false; 
   s0 && !s1 -> s0=false, s1=false, fork0=true, fork1=true, hasL=false, hasR=false;
   true -> s0=true, s1=true;   
}


Main(){
 phil1:Phil1;
 phil2:Phil2;

 run phil1();
 run phil2();
}

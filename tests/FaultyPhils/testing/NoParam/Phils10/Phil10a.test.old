Global fork0 : BOOL;
Global fork1 : BOOL;
Global fork2 : BOOL;
Global fork3 : BOOL;
Global fork4 : BOOL;
Global fork5 : BOOL;
Global fork6 : BOOL;
Global fork7 : BOOL;
Global fork8 : BOOL;
Global fork9 : BOOL;

// FIRST RIGHT
Process Phil0{
  s0, s1, hasL, hasR: BOOL;
   Initial: !s0 && !s1  && !hasL && !hasR && fork0 && fork1;
   Normative: !(s0 && s1); 

   !s0 && !s1 -> s0=false, s1=true; 
   !s0 && !s1 -> s0=false, s1=false; 
   !s0 && s1 && fork1 && !hasR  -> fork1=false, hasR=true; 
   !s0 && s1 && hasR && fork0 -> fork0=false, hasL=true;  
   !s0 && s1 && hasL && hasR -> s0=true, s1=false; 
   s0 && !s1 -> s0=false, s1=false, fork0=false, fork1=false;
   true -> s0=true, s1=true;  

}

// FIRST LEFT
Process Phil1{
    s0, s1, hasL, hasR: BOOL;
   Initial: !s0 && !s1  && !hasL && !hasR && fork1 && fork2;
   Normative: !(s0 && s1); 

   !s0 && !s1 -> s0=false, s1=true; 
   !s0 && !s1 -> s0=false, s1=false; 
   !s0 && s1 && fork1 && !hasL  -> fork1=false, hasL=true; 
   !s0 && s1 && hasL && fork2 -> fork2=false, hasR=true;  
   !s0 && s1 && hasL && hasR -> s0=true, s1=false; 
   s0 && !s1 -> s0=false, s1=false, fork1=false, fork1=false;
   true -> s0=true, s1=true;  
    
}

// FIRST RIGHT
Process Phil2{
  s0, s1, hasL, hasR: BOOL;
   Initial: !s0 && !s1  && !hasL && !hasR && fork2 && fork3;
   Normative: !(s0 && s1); 

   !s0 && !s1 -> s0=false, s1=true; 
   !s0 && !s1 -> s0=false, s1=false; 
   !s0 && s1 && fork3 && !hasR  -> fork3=false, hasR=true; 
   !s0 && s1 && hasR && fork2 -> fork2=false, hasL=true;  
   !s0 && s1 && hasL && hasR -> s0=true, s1=false; 
   s0 && !s1 -> s0=false, s1=false, fork2=false, fork3=false;
   true -> s0=true, s1=true;      
}

// FIRST LEFT
Process Phil3{
   s0, s1, hasL, hasR: BOOL;
   Initial: !s0 && !s1  && !hasL && !hasR && fork3 && fork4;
   Normative: !(s0 && s1); 

   !s0 && !s1 -> s0=false, s1=true; 
   !s0 && !s1 -> s0=false, s1=false; 
   !s0 && s1 && fork3 && !hasL  -> fork3=false, hasL=true; 
   !s0 && s1 && hasL && fork4 -> fork4=false, hasR=true;  
   !s0 && s1 && hasL && hasR -> s0=true, s1=false; 
   s0 && !s1 -> s0=false, s1=false, fork3=false, fork4=false;
   true -> s0=true, s1=true;  
}

// FIRST RIGHT
Process Phil4{
   s0, s1, hasL, hasR: BOOL;
   Initial: !s0 && !s1  && !hasL && !hasR && fork4 && fork5;
   Normative: !(s0 && s1); 

   !s0 && !s1 -> s0=false, s1=true; 
   !s0 && !s1 -> s0=false, s1=false; 
   !s0 && s1 && fork5 && !hasR  -> fork5=false, hasR=true; 
   !s0 && s1 && hasR && fork4 -> fork4=false, hasL=true;  
   !s0 && s1 && hasL && hasR -> s0=true, s1=false; 
   s0 && !s1 -> s0=false, s1=false, fork4=false, fork5=false;
   true -> s0=true, s1=true;          
}

// FIRST LEFT
Process Phil5{
   s0, s1, hasL, hasR: BOOL;
   Initial: !s0 && !s1  && !hasL && !hasR && fork5 && fork6;
   Normative: !(s0 && s1); 

   !s0 && !s1 -> s0=false, s1=true; 
   !s0 && !s1 -> s0=false, s1=false; 
   !s0 && s1 && fork5 && !hasL  -> fork3=false, hasL=true; 
   !s0 && s1 && hasL && fork4 -> fork5=false, hasR=true;  
   !s0 && s1 && hasL && hasR -> s0=true, s1=false; 
   s0 && !s1 -> s0=false, s1=false, fork5=false, fork6=false;
   true -> s0=true, s1=true;      
}

// FIRST RIGHT
Process Phil6{
    s0, s1, hasL, hasR: BOOL;
   Initial: !s0 && !s1  && !hasL && !hasR && fork6 && fork7;
   Normative: !(s0 && s1); 

   !s0 && !s1 -> s0=false, s1=true; 
   !s0 && !s1 -> s0=false, s1=false; 
   !s0 && s1 && fork7 && !hasR  -> fork7=false, hasR=true; 
   !s0 && s1 && hasR && fork6 -> fork6=false, hasL=true;  
   !s0 && s1 && hasL && hasR -> s0=true, s1=false; 
   s0 && !s1 -> s0=false, s1=false, fork6=false, fork7=false;
   true -> s0=true, s1=true;         
    
}

// FIRST LEFT
Process Phil7{
    s0, s1, hasL, hasR: BOOL;
   Initial: !s0 && !s1  && !hasL && !hasR && fork7 && fork8;
   Normative: !(s0 && s1); 

   !s0 && !s1 -> s0=false, s1=true; 
   !s0 && !s1 -> s0=false, s1=false; 
   !s0 && s1 && fork7 && !hasL  -> fork7=false, hasL=true; 
   !s0 && s1 && hasL && fork8 -> fork8=false, hasR=true;  
   !s0 && s1 && hasL && hasR -> s0=true, s1=false; 
   s0 && !s1 -> s0=false, s1=false, fork7=false, fork8=false;
   true -> s0=true, s1=true;      
}

// FIRST RIGHT
Process Phil8{
    s0, s1, hasL, hasR: BOOL;
   Initial: !s0 && !s1  && !hasL && !hasR && fork8 && fork9;
   Normative: !(s0 && s1); 

   !s0 && !s1 -> s0=false, s1=true; 
   !s0 && !s1 -> s0=false, s1=false; 
   !s0 && s1 && fork9 && !hasR  -> fork9=false, hasR=true; 
   !s0 && s1 && hasR && fork8 -> fork8=false, hasL=true;  
   !s0 && s1 && hasL && hasR -> s0=true, s1=false; 
   s0 && !s1 -> s0=false, s1=false, fork8=false, fork9=false;
   true -> s0=true, s1=true;      
}

// FIRST LEFT
Process Phil9{
    s0, s1, hasL, hasR: BOOL;
   Initial: !s0 && !s1  && !hasL && !hasR && fork9 && fork0;
   Normative: !(s0 && s1); 

   !s0 && !s1 -> s0=false, s1=true; 
   !s0 && !s1 -> s0=false, s1=false; 
   !s0 && s1 && fork9 && !hasL  -> fork9=false, hasL=true; 
   !s0 && s1 && hasL && fork0 -> fork0=false, hasR=true;  
   !s0 && s1 && hasL && hasR -> s0=true, s1=false; 
   s0 && !s1 -> s0=false, s1=false, fork9=false, fork0=false;
   true -> s0=true, s1=true;      
}






Main(){
 phil0:Phil0;
 phil1:Phil1;
 phil2:Phil2;
 phil3:Phil3;
 phil4:Phil4;
 phil5:Phil5;
 phil6:Phil6;
 phil7:Phil7;
 phil8:Phil8;
 phil9:Phil9;

 run phil0();
 run phil1();
 run phil2();
 run phil3();
 run phil4();
 run phil5();
 run phil6();
 run phil7();
 run phil8();
 run phil9();
 
}

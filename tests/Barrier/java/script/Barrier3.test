Enum state = {ready, executing, sucess, error}
Enum ph = {ph0, ph1}
    
Global state0 : state;
Global state1 : state;
Global state2 : state;
    
Global php0 : ph;
Global php1 : ph;
Global php2 : ph;
    
    
Process P(myState: state, myPhase : ph, otherState : state, otherPhase : ph){
Initial:  (myState == ready)  && (myPhase == ph0);
Normative: !(myState == error);
    
    (myState == ready) && ((otherState == ready) || (otherState == executing)) -> myState = executing;
    (myState == executing) && ((otherState == success) || (otherState == executing)) -> myState = success;
    (myState == success)  && (!(otherState == executing) && (otherState == ready)) -> myPhase = otherPhase , myState = ready;
    (myState == error) && (!(otherState == executing) && (otherState == ready)) -> myPhase = otherPhase, myState = ready;
    (myState == error) && (otherState == success) -> myPhase = otherPhase, myState = ready;
    true -> myState = error;
}
    
    
Main(){ 
  
    p0 : P;
    p1 : P;
    p2 : P;
    
    
    run  p0(state0, php0 , state1 ,php1 );
    run  p1(state1, php1 , state2 ,php2 );
    run  p2(state2, php2 , state0 ,php0 );
}

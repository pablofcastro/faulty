-- An implementation of the (faulty) dinner philosophers,

MODULE EvenPhil(lfork, rfork)
VAR
	state : {thinking, hungry, eating, crash};
        hasR : boolean;
        hasL: boolean;
INIT
  state=thinking & !hasR & !hasL; 

ASSIGN
     next(state) := case
                    state = thinking & !hasL & !hasR : {thinking, hungry, crash};
                    state = hungry & hasL & hasR: {eating, crash};
                    state = eating : {thinking, crash};
		    TRUE : {state,crash};
                   esac;

     next(lfork) := case 
                     state = hungry & lfork : !lfork;
                     state = eating : TRUE;
                     TRUE : lfork;
                    esac;

     next(rfork) := case 
                    state = hungry & hasL & rfork : FALSE;
                    state = eating : TRUE;
                    TRUE : rfork;
                   esac; 
    
     next(hasL) := case
                   state = hungry & lfork : TRUE;
                   state = eating : FALSE;
                   TRUE : hasL;
                   esac;

     next(hasR) := case
                   state=hungry & hasL & rfork : TRUE;
                   state=eating : FALSE;
                   TRUE : hasR;
                  esac;
DEFINE
     n := !(state = crash);


MODULE OddPhil(lfork, rfork)
VAR
	state : {thinking, hungry, eating, crash};
        hasR : boolean;
        hasL: boolean;
INIT
    state=thinking & !hasR & !hasL; 

ASSIGN

     init(state) := thinking;
     init(hasR) := FALSE;
     init(hasL) := FALSE;
     next(state) := case
                    state = thinking & !hasL & !hasR : {thinking, hungry, crash};
                    state = hungry & hasL & hasR: {eating,crash};
                    state = eating : {thinking,crash};
		    TRUE : {state,crash};
                   esac;

     next(rfork) := case 
                     state = hungry & rfork : !rfork;
                     state = eating : TRUE;
                     TRUE : rfork;
                    esac;
     next(lfork) := case 
                    state = hungry & hasR & lfork : FALSE;
                    state = eating : TRUE;
                    TRUE : lfork;
                   esac; 
    
     next(hasR) := case
                   state = hungry & rfork : TRUE;
                   state = eating : FALSE;
                   TRUE : hasR;
                   esac;
     next(hasL) := case
                   state=hungry & hasR & lfork : TRUE;
                   state=eating : FALSE;
                   TRUE : hasL;
                  esac;
DEFINE
   n := !(state = crash);

MODULE main
VAR
  fork0 : boolean;
  fork1 : boolean;
  fork2 : boolean;
  fork3: boolean;
  fork4: boolean;
  fork5: boolean;
  fork6: boolean;
  phil0: process EvenPhil(fork0,fork1);
  phil1: process OddPhil(fork1,fork2);
  phil2: process EvenPhil(fork2, fork3);
  phil3: process OddPhil(fork3, fork4);
  phil4: process EvenPhil(fork4, fork5);
  phil5: process OddPhil(fork5, fork6);
  phil6: process EvenPhil(fork6, fork0);
INIT
  fork0 & fork1 & fork2 & fork3 & fork4 & fork5 & fork6;

DEFINE
  norm := phil0.n & phil1.n & phil2.n & phil3.n & phil4.n & phil5.n & phil6.n; 

SPEC
--  AG(phil0.state = hungry -> AF(phil0.state = eating))
-- Property: P(true U phili.eating)
--       EG(E[norm U (phil1.state = eating) & norm ])
-- Property: R(EF phi2.state = eating | G(!phi1.crash & !phi3.crash))
       !EF(!norm & EF((phil1.state = thinking) & (phil3.state = thinking) & !(phil2.state = crash) & !(EF(phil2.state = eating | phil1.state = eating | phil3.state = eating)))) 



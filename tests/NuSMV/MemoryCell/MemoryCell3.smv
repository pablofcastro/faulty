-- This is an implementation of a Memory with three bits,
-- some of them may be faulty


MODULE Memory
VAR
   b0: boolean; -- first bit
   b1: boolean; -- second bit
   b2: boolean; -- third bit
   w : boolean; -- bit indicating the last value written 
   r: boolean;  -- the read value from the memory

INIT
   b0 & b1 & b2 & w & r

TRANS
   next(w)=FALSE  & next(b0)=FALSE & next(b1)=FALSE & next(b2)=FALSE & next(r)=FALSE
   |
   next(w)=TRUE  & next(b0)=TRUE & next(b1)=TRUE & next(b2)=TRUE & next(r)=TRUE
   |
   next(b0)=!b0 & next(b1)=b1 & next(b2)=b2 & next(w)=w & next(r)= (!b0&b1 | b1&b2 | !b0&b2)
   |
   next(b0)=b0 & next(b1)=!b1 & next(b2)=b2 & next(w)=w & next(r)= (b0&!b1 | !b1&b2 | b0&b2) 	   
   |
   next(b0)=b0 & next(b1)=b1 & next(b2)=!b2 & next(w)=w & next(r)= (b0&b1 | b1&!b2 | b0&!b2) 


DEFINE
   n := b0=b1 & b1=b2;

MODULE main
VAR 
  m1 : process Memory();

SPEC
--P3:
--  !E[m1.n U (m1.n & ((!m1.w & m1.r) | (m1.w & !m1.r) ) & EG m1.n)]; --O(w->r)
--P4:
--  !EF(!m1.n & E[(m1.r & !m1.n) U !m1.w & ((!m1.n & ((m1.r & !m1.w)|(!m1.r & m1.w))| E[!m1.n U ((m1.r & !m1.w) | (!m1.r & m1.w))& !m1.n] | EG(!m1.n)))])
--    !EF(!m1.n & E[(m1.r & !m1.n) U m1.n  & (E[!m1.n U ((!m1.r & m1.w) | (m1.r & !m1.w) & !m1.n)]| EG(!m1.n))]) 
  !EF(!m1.n & E[m1.r & !m1.n U m1.n & ((m1.r & !m1.w)|(!m1.r & m1.w))])

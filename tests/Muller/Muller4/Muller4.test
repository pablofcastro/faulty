
Global z0:BOOL;
Global z1:BOOL;
Global z2:BOOL;

Process Circuit(z:BOOL){
	x0,x1: BOOL;
	Initial: x0 && x1 && z;
	Normative: x0==x1;
		x0==z && x1==z -> x0=!x0, x1=!x1, z=(!x0 && !x1 || !x0&&z || !x1&&z);
		x0==z && x1==z -> x0=!x0, z=(!x0 && x1 || !x0&&z || x1&&z);
                x0==z && x1==z -> x1=!x1, z=(x0 && !x1 || x0&&z || !x1&&z);
	   	!(x0==z) && x1==z -> x1=!x1, z=(x0 && !x1 || x0&&z || !x1&&z);
                 x0==z && !(x1==z) -> x0=!x0, z=(!x0 && x1 || !x0&&z || x1&&z);
}


Process Join(out1:BOOL,out2:BOOL,out3:BOOL){
	Initial: out3;
	Normative: true;
		!(out3 == (out1 && out2 || out1 && out3 || out2 && out3)) -> out3 = !out3;
} 

Main(){
	c1: Circuit;
	c2: Circuit;
	join: Join;
	run c1(z0);
	run c2(z1);
	run join(z0,z1,z2);
}



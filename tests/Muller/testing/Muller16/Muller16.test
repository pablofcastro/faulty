
Global z0:BOOL;
Global z1:BOOL;
Global z2:BOOL;
Global z3:BOOL;
Global z4:BOOL;
Global z5:BOOL;
Global z6:BOOL;
Global z7:BOOL;
Global z8:BOOL;
Global z9:BOOL;
Global z10:BOOL;
Global z11:BOOL;
Global z12:BOOL;
Global z13:BOOL;
Global z14:BOOL;
//Global z15:BOOL;


Process Circuit1{
	x0,x1: BOOL;
	Initial: x0 && x1 && z0;
	Normative: x0==x1;
		x0==z0 && x1==z0 -> x0=!x0, x1=!x1, z0=(!x0 && !x1 || !x0&&z0 || !x1&&z0);
		x0==z0 && x1==z0 -> x0=!x0, z0=(!x0 && x1 || !x0&&z0 || x1&&z0);
                x0==z0 && x1==z0 -> x1=!x1, z0=(x0 && !x1 || x0&&z0 || !x1&&z0);
	   	!(x0==z0) && x1==z0 -> x1=!x1, z0=(x0 && !x1 || x0&&z0 || !x1&&z0);
                 x0==z0 && !(x1==z0) -> x0=!x0, z0=(!x0 && x1 || !x0&&z0 || x1&&z0);
}


Process Circuit2{
	x2,x3: BOOL;
	Initial: x2 && x3 && z1;
	Normative: x2==x3;
		x2==z1 && x3==z1 -> x2=!x2, x3=!x3, z1=(!x2 && !x3 || !x2&&z1 || !x3&&z1);
		x2==z1 && x3==z1 -> x2=!x2, z1=(!x2 && x3 || !x2&&z1 || x3&&z1);
                x2==z1 && x3==z1 -> x3=!x3, z1=(x2 && !x3 || x2&&z1 || !x3&&z1);
	   	!(x2==z1) && x3==z1 -> x3=!x3, z1=(x2 && !x3 || x2&&z1 || !x3&&z1);
                x2==z1 && !(x3==z1) -> x2=!x2, z1=(!x2 && x3 || !x2&&z1 || x3&&z1);
}

Process Circuit3{
	x4,x5: BOOL;
	Initial: x4 && x5 && z2;
	Normative: x4==x5;
		x4==z2 && x5==z2 -> x4=!x4, x5=!x5, z3=(!x4 && !x5 || !x4&&z2 || !x5&&z2);
		x4==z2 && x5==z2 -> x4=!x4, z2=(!x4 && x5 || !x4&&z2 || x5&&z2);
                x4==z2 && x5==z2 -> x5=!x5, z3=(x4 && !x5 || x4&&z2 || !x5&&z2);
	   	!(x4==z2) && x5==z2 -> x5=!x5, z2=(x4 && !x5 || x4&&z2 || !x5&&z2);
                x4==z2 && !(x5==z2) -> x4=!x4, z2=(!x4 && x5 || !x4&&z2 || x5&&z2);
}


Process Circuit4{
	x6,x7: BOOL;
	Initial: x6 && x7 && z3;
	Normative: x6==x7;
		x6==z3 && x7==z3 -> x6=!x6, x7=!x7, z3=(!x6 && !x7 || !x6&&z3 || !x7&&z3);
		x6==z3 && x7==z3 -> x6=!x6, z3=(!x6 && x7 || !x6&&z3 || x7&&z3);
                x6==z3 && x7==z3 -> x7=!x7, z3=(x6 && !x7 || x6&&z3 || !x7&&z3);
	   	!(x6==z3) && x7==z3 -> x7=!x7, z3=(x6 && !x7 || x6&&z3 || !x7&&z3);
                x6==z3 && !(x7==z3) -> x6=!x6, z3=(!x6 && x7 || !x6&&z3 || x7&&z3);
}


Process Circuit5{
	x8,x9: BOOL;
	Initial: x8 && x9 && z4;
	Normative: x8==x9;
		x8==z4 && x9==z4 -> x8=!x8, x9=!x9, z4=(!x8 && !x9 || !x8&&z4 || !x9&&z4);
		x8==z4 && x9==z4 -> x8=!x8, z4=(!x8 && x9 || !x8&&z4 || x9&&z4);
                x8==z4 && x9==z4 -> x9=!x9, z4=(x8 && !x9 || x8&&z4 || !x9&&z4);
	   	!(x8==z4) && x9==z4 -> x9=!x9, z4=(x8 && !x9 || x8&&z4 || !x9&&z4);
                x8==z4 && !(x9==z4) -> x8=!x8, z4=(!x8 && x9 || !x8&&z4 || x9&&z4);

}

Process Circuit6{
	x10,x11: BOOL;
	Initial: x10 && x11 && z5;
	Normative: x10==x11;
		x10==z5 && x11==z5 -> x10=!x10, x11=!x11, z5=(!x10 && !x11 || !x10&&z5 || !x11&&z5);
		x10==z5 && x11==z5 -> x10=!x10, z5=(!x10 && x11 || !x10&&z5 || x11&&z5);
                x10==z5 && x11==z5 -> x11=!x11, z5=(x10 && !x11 || x10&&z5 || !x11&&z5);
	   	!(x10==z5) && x11==z5 -> x11=!x11, z5=(x10 && !x11 || x10&&z5 || !x11&&z5);
                x10==z5 && !(x11==z5) -> x10=!x10, z5=(!x10 && x11 || !x10&&z5 || x11&&z5);
}

Process Circuit7{
	x12,x13: BOOL;
	Initial: x12 && x13 && z6;
	Normative: x12==x13;
		x12==z6 && x13==z6 -> x12=!x12, x13=!x13, z6=(!x12 && !x13 || !x12&&z6 || !x13&&z6);
		x12==z6 && x13==z6 -> x12=!x12, z6=(!x12 && x13 || !x12&&z6 || x13&&z6);
                x12==z6 && x13==z6 -> x13=!x13, z6=(x12 && !x13 || x12&&z6 || !x13&&z6);
	   	!(x12==z6) && x13==z6 -> x13=!x13, z6=(x12 && !x13 || x12&&z6 || !x13&&z6);
                x12==z6 && !(x13==z6) -> x12=!x12, z6=(!x12 && x13 || !x12&&z6 || x13&&z6);

}


Process Circuit8{
	x14,x15: BOOL;
	Initial: x14 && x15 && z7;
	Normative: x14==x15;
		x14==z7 && x15==z7 -> x14=!x14, x15=!x15, z7=(!x14 && !x15 || !x14&&z7 || !x15&&z7);
		x14==z7 && x15==z7 -> x14=!x14, z7=(!x14 && x15 || !x14&&z7 || x15&&z7);
                x14==z7 && x15==z7 -> x15=!x15, z7=(x14 && !x15 || x14&&z7 || !x15&&z7);
	   	!(x14==z7) && x15==z7 -> x15=!x15, z7=(x14 && !x15 || x14&&z7 || !x15&&z7);
                x14==z7 && !(x15==z7) -> x14=!x14, z7=(!x14 && x15 || !x14&&z7 || x15&&z7);

}




Process Join1{

	Initial: z8;
	Normative: z8;
		!(z8== (z0 && z1 || z0&&z8 || z1&&z8)) -> z8 = !z8;
} 

Process Join2{

	Initial: z9;
	Normative: z9;
		!(z9== (z2 && z3 || z2&&z9 || z3&&z9)) -> z9 = !z9;
} 

Process Join3{

	Initial: z10;
	Normative: z10;
		!(z10== (z4 && z5 || z4&&z10 || z5&&z10)) -> z10 = !z10;
} 

Process Join4{
	Initial: z11;
	Normative: z11;
		!(z11== (z6 && z7 || z6&&z11 || z7&&z11)) -> z11 = !z11;	 
}

Process Join5{

	Initial: z12;
	Normative: z12;
		!(z12== (z8 && z9 || z8&&z12 || z9&&z12)) -> z12 = !z12;
} 

Process Join6{

	Initial: z13;
	Normative: z13;
		!(z13== (z10 && z11 || z10&&z13 || z11&&z13)) -> z13 = !z13;
} 

Process Join7{

	Initial: z14;
	Normative: z14;
		!(z14== (z12 && z13 || z12&&z14 || z13&&z14)) -> z14 = !z14;
} 



Main(){
	c1: Circuit1;
	c2: Circuit2;
	c3: Circuit3;
	c4: Circuit4;
	c5: Circuit5;
	c6: Circuit6;
	c7: Circuit7;
	c8: Circuit8;
	join1: Join1;
	join2: Join2;
	join3: Join3;
	join4: Join4;
	join5: Join5;
	join6: Join6;
	join7: Join7;
	run c1();
	run c2();
	run c3();
	run c4();
	run c5();
	run c6();
	run c7();
	run c8();
	run join1();
	run join2();
	run join3();
	run join4();
	run join5();
	run join6();
	run join7();
}



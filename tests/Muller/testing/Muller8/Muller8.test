


Global z0:BOOL;
Global z1:BOOL;
Global z2:BOOL;
Global z3:BOOL;
Global z4:BOOL;
Global z5:BOOL;
Global z6:BOOL;

Process Circuit1{
	x0,x1: BOOL;
	Initial: x0 && x1 && z0;
	Normative: x0==x1;
		x0==z0 && x1==z0 -> x0=!x0, x1=!x1, z0=(!x0 && !x1 || !x0&&z0 || !x1&&z0);
		x0==z0 && x1==z0 -> x0=!x0, z0=(!x0 && x1 || !x0&&z0 || x1&&z0);
                x0==z0 && x1==z0 -> x1=!x1, z0=(x0 && !x1 || x0&&z0 || !x1&&z0);
	   	!(x0==z0) && x1==z0 -> x1=!x1, z0=(x0 && !x1 || x0&&z0 || !x1&&z0);
                 x0==z0 && !(x1==z0) -> x0=!x0, z0=(!x0 && x1 || !x0&&z0 || x1&&z0);
}


Process Circuit2{
	x2,x3: BOOL;
	Initial: x2 && x3 && z1;
	Normative: x2==x3;
		x2==z1 && x3==z1 -> x2=!x2, x3=!x3, z1=(!x2 && !x3 || !x2&&z1 || !x3&&z1);
		x2==z1 && x3==z1 -> x2=!x2, z1=(!x2 && x3 || !x2&&z1 || x3&&z1);
                x2==z1 && x3==z1 -> x3=!x3, z1=(x2 && !x3 || x2&&z1 || !x3&&z1);
	   	!(x2==z1) && x3==z1 -> x3=!x3, z1=(x2 && !x3 || x2&&z1 || !x3&&z1);
                x2==z1 && !(x3==z1) -> x2=!x2, z1=(!x2 && x3 || !x2&&z1 || x3&&z1);
}

Process Circuit3{
	x4,x5: BOOL;
	Initial: x4 && x5 && z2;
	Normative: x4==x5;
		x4==z2 && x5==z2 -> x4=!x4, x5=!x5, z2=(!x4 && !x5 || !x4&&z2 || !x5&&z2);
		x4==z2 && x5==z2 -> x4=!x4, z2=(!x4 && x5 || !x4&&z2 || x5&&z2);
                x4==z2 && x5==z2 -> x5=!x5, z2=(x4 && !x5 || x4&&z2 || !x5&&z2);
	   	!(x4==z2) && x5==z2 -> x5=!x5, z2=(x4 && !x5 || x4&&z2 || !x5&&z2);
                x4==z2 && !(x5==z2) -> x4=!x4, z2=(!x4 && x5 || !x4&&z2 || x5&&z2);
}


Process Circuit4{
	x6,x7: BOOL;
	Initial: x6 && x7 && z3;
	Normative: x6==x7;
		x6==z3 && x7==z3 -> x6=!x6, x7=!x7, z3=(!x6 && !x7 || !x6&&z3 || !x7&&z3);
		x6==z3 && x7==z3 -> x6=!x6, z3=(!x6 && x7 || !x6&&z3 || x7&&z3);
                x6==z3 && x7==z3 -> x7=!x7, z3=(x6 && !x7 || x6&&z3 || !x7&&z3);
	   	!(x6==z3) && x7==z3 -> x7=!x7, z3=(x6 && !x7 || x6&&z3 || !x7&&z3);
                x6==z3 && !(x7==z3) -> x6=!x6, z3=(!x6 && x7 || !x6&&z3 || x7&&z3);}


Process Join1{

	Initial: z4;
	Normative: z4;
		!(z4== (z0 && z1 || z0&&z4 || z1&&z4)) -> z4 = !z4;
} 

Process Join2{

	Initial: z5;
	Normative: z5;
		!(z5== (z2 && z3 || z2&&z5 || z3&&z5)) -> z5 = !z5;
} 

Process Join3{

	Initial: z6;
	Normative: z6;
		!(z6== (z4 && z5 || z4&&z6 || z5&&z6)) -> z6 = !z6;
} 




Main(){
	c1: Circuit1;
	c2: Circuit2;
	c3: Circuit3;
	c4: Circuit4;
	join1: Join1;
	join2: Join2;
	join3: Join3;
	run c1();
	run c2();
	run c3();
	run c4();
	run join1();
	run join2();
	run join3();
}



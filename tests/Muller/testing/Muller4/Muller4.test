
Global z0:BOOL;
Global z1:BOOL;
Global z2:BOOL;

Process Circuit1{
	x0,x1: BOOL;
	Initial: x0 && x1 && z0;
	Normative: x0==x1;
		x0==z0 && x1==z0 -> x0=!x0, x1=!x1, z0=(!x0 && !x1 || !x0&&z0 || !x1&&z0);
		x0==z0 && x1==z0 -> x0=!x0, z0=(!x0 && x1 || !x0&&z0 || x1&&z0);
                x0==z0 && x1==z0 -> x1=!x1, z0=(x0 && !x1 || x0&&z0 || !x1&&z0);
	   	!(x0==z0) && x1==z0 -> x1=!x1, z0=(x0 && !x1 || x0&&z0 || !x1&&z0);
                 x0==z0 && !(x1==z0) -> x0=!x0, z0=(!x0 && x1 || !x0&&z0 || x1&&z0);
		}

Process Circuit2{
	x2,x3: BOOL;
	Initial: x2 && x3 && z1;
	Normative: x2==x3;
		x2==z1 && x3==z1 -> x2=!x2, x3=!x3, z1=(!x2 && !x3 || !x2&&z1 || !x3&&z1);
		x2==z1 && x3==z1 -> x2=!x2, z1=(!x2 && x3 || !x2&&z1 || x3&&z1);
                x2 == z1 && x3==z1 -> x3=!x3, z1=(x2 && !x3 || x2&&z1 || !x3&&z1);
	   	!(x2==z1) && x3==z1 -> x3=!x3, z1=(x2 && !x3 || x2&&z1 || !x3&&z1);
		x2==z1 && !(x3==z1) -> x2 = !x2, z1=(!x2 && x3 || !x2&&z1 || x3&&z1);
}

Process Join{
	Initial: z2;
	Normative: true;
		!(z2== (z0 && z1 || z0&&z2 || z1&&z2)) -> z2 = !z2;
} 

Main(){
	c1: Circuit1;
	c2: Circuit2;
	join: Join;
	run c1();
	run c2();
	run join();
}



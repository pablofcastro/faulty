
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 06 10:58:51 ART 2015
//----------------------------------------------------

package parserProgram;

import java_cup.runtime.*;
import net.sf.javabdd.*;
import faulty.*;
import faulty.auxiliar.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 06 10:58:51 ART 2015
  */
public class parserFaulty extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserFaulty() {super();}

  /** Constructor which sets the default scanner. */
  public parserFaulty(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserFaulty(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\043\003\000\002\033" +
    "\010\000\002\033\006\000\002\033\006\000\002\033\004" +
    "\000\002\031\003\000\002\031\005\000\002\030\006\000" +
    "\002\027\003\000\002\027\005\000\002\032\011\000\002" +
    "\026\003\000\002\026\004\000\002\024\007\000\002\024" +
    "\005\000\002\025\014\000\002\025\012\000\002\017\005" +
    "\000\002\020\005\000\002\021\003\000\002\021\005\000" +
    "\002\022\005\000\002\023\003\000\002\023\005\000\002" +
    "\042\003\000\002\042\003\000\002\016\003\000\002\016" +
    "\005\000\002\015\005\000\002\014\003\000\002\014\005" +
    "\000\002\013\005\000\002\013\010\000\002\003\003\000" +
    "\002\004\003\000\002\004\005\000\002\005\003\000\002" +
    "\005\005\000\002\007\003\000\002\007\005\000\002\006" +
    "\003\000\002\006\005\000\002\006\005\000\002\010\003" +
    "\000\002\010\005\000\002\010\005\000\002\011\003\000" +
    "\002\011\005\000\002\011\005\000\002\012\003\000\002" +
    "\012\004\000\002\012\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\007" +
    "\000\002\002\005\000\002\040\010\000\002\041\006\000" +
    "\002\037\003\000\002\037\005\000\002\036\005\000\002" +
    "\034\003\000\002\034\005\000\002\035\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\010\036\011\043\016\046\012\001\002\000" +
    "\006\036\ufff5\042\ufff5\001\002\000\004\017\230\001\002" +
    "\000\004\017\217\001\002\000\004\002\000\001\002\000" +
    "\004\017\ufffb\001\002\000\004\052\065\001\002\000\004" +
    "\052\036\001\002\000\004\017\ufff8\001\002\000\006\036" +
    "\011\042\031\001\002\000\004\002\027\001\002\000\004" +
    "\052\017\001\002\000\004\015\020\001\002\000\004\047" +
    "\021\001\002\000\004\016\022\001\002\000\004\037\023" +
    "\001\002\000\006\032\026\033\025\001\002\000\004\017" +
    "\ufff6\001\002\000\004\017\uffe7\001\002\000\004\017\uffe8" +
    "\001\002\000\004\002\001\001\002\000\004\002\ufffc\001" +
    "\002\000\004\011\033\001\002\000\006\036\ufff4\042\ufff4" +
    "\001\002\000\004\012\034\001\002\000\004\013\035\001" +
    "\002\000\004\052\036\001\002\000\010\013\uffea\020\uffea" +
    "\024\uffea\001\002\000\004\014\061\001\002\000\004\017" +
    "\uffc4\001\002\000\004\017\047\001\002\000\006\020\044" +
    "\024\043\001\002\000\004\052\046\001\002\000\004\052" +
    "\045\001\002\000\004\017\uffc2\001\002\000\010\013\uffe9" +
    "\020\uffe9\024\uffe9\001\002\000\006\041\053\052\036\001" +
    "\002\000\004\017\uffc1\001\002\000\004\017\uffc3\001\002" +
    "\000\004\017\057\001\002\000\004\052\054\001\002\000" +
    "\004\011\055\001\002\000\004\012\056\001\002\000\004" +
    "\017\uffbf\001\002\000\006\014\uffc5\041\053\001\002\000" +
    "\004\017\uffc0\001\002\000\004\002\uffc6\001\002\000\006" +
    "\020\063\024\043\001\002\000\006\032\026\033\025\001" +
    "\002\000\004\017\ufff9\001\002\000\006\013\067\040\070" +
    "\001\002\000\006\036\ufff2\042\ufff2\001\002\000\006\034" +
    "\075\052\036\001\002\000\004\052\036\001\002\000\006" +
    "\013\067\024\043\001\002\000\006\036\ufff3\042\ufff3\001" +
    "\002\000\004\017\206\001\002\000\004\017\uffed\001\002" +
    "\000\004\020\204\001\002\000\006\020\202\024\043\001" +
    "\002\000\004\017\100\001\002\000\004\035\102\001\002" +
    "\000\004\017\156\001\002\000\004\020\103\001\002\000" +
    "\020\005\104\011\123\031\120\047\106\050\112\051\115" +
    "\052\116\001\002\000\020\005\104\011\123\031\120\047" +
    "\106\050\112\051\115\052\116\001\002\000\016\012\uffde" +
    "\017\uffde\021\uffde\024\uffde\025\uffde\026\151\001\002\000" +
    "\034\004\uffcc\005\uffcc\006\uffcc\010\uffcc\012\uffcc\017\uffcc" +
    "\021\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\001\002\000\020\012\uffda\017\uffda\021\uffda\023\153" +
    "\024\uffda\025\uffda\026\uffda\001\002\000\034\004\uffcf\005" +
    "\uffcf\006\uffcf\010\uffcf\012\uffcf\017\uffcf\021\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\001\002\000" +
    "\034\004\uffd5\005\uffd5\006\141\010\140\012\uffd5\017\uffd5" +
    "\021\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030" +
    "\uffd5\001\002\000\034\004\uffcb\005\uffcb\006\uffcb\010\uffcb" +
    "\012\uffcb\017\uffcb\021\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\030\uffcb\001\002\000\014\012\uffdf\017\uffdf" +
    "\021\uffdf\024\uffdf\025\147\001\002\000\030\004\135\005" +
    "\136\012\uffd8\017\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8" +
    "\026\uffd8\027\134\030\133\001\002\000\034\004\uffca\005" +
    "\uffca\006\uffca\010\uffca\012\uffca\017\uffca\021\uffca\023\uffca" +
    "\024\uffca\025\uffca\026\uffca\027\uffca\030\uffca\001\002\000" +
    "\036\004\uffc9\005\uffc9\006\uffc9\007\127\010\uffc9\012\uffc9" +
    "\017\uffc9\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\001\002\000\034\004\uffd2\005\uffd2\006\uffd2" +
    "\010\uffd2\012\uffd2\017\uffd2\021\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\026\uffd2\027\uffd2\030\uffd2\001\002\000\020\005\104" +
    "\011\123\031\120\047\106\050\112\051\115\052\116\001" +
    "\002\000\004\017\uffee\001\002\000\016\012\uffdc\017\uffdc" +
    "\021\uffdc\024\uffdc\025\uffdc\026\uffdc\001\002\000\020\005" +
    "\104\011\123\031\120\047\106\050\112\051\115\052\116" +
    "\001\002\000\004\012\125\001\002\000\034\004\uffc7\005" +
    "\uffc7\006\uffc7\010\uffc7\012\uffc7\017\uffc7\021\uffc7\023\uffc7" +
    "\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\001\002\000" +
    "\034\004\uffce\005\uffce\006\uffce\010\uffce\012\uffce\017\uffce" +
    "\021\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030" +
    "\uffce\001\002\000\004\045\130\001\002\000\004\011\131" +
    "\001\002\000\004\012\132\001\002\000\034\004\uffc8\005" +
    "\uffc8\006\uffc8\010\uffc8\012\uffc8\017\uffc8\021\uffc8\023\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\001\002\000" +
    "\020\005\104\011\123\031\120\047\106\050\112\051\115" +
    "\052\116\001\002\000\020\005\104\011\123\031\120\047" +
    "\106\050\112\051\115\052\116\001\002\000\020\005\104" +
    "\011\123\031\120\047\106\050\112\051\115\052\116\001" +
    "\002\000\020\005\104\011\123\031\120\047\106\050\112" +
    "\051\115\052\116\001\002\000\034\004\uffd3\005\uffd3\006" +
    "\141\010\140\012\uffd3\017\uffd3\021\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\001\002\000\020\005" +
    "\104\011\123\031\120\047\106\050\112\051\115\052\116" +
    "\001\002\000\020\005\104\011\123\031\120\047\106\050" +
    "\112\051\115\052\116\001\002\000\034\004\uffd1\005\uffd1" +
    "\006\uffd1\010\uffd1\012\uffd1\017\uffd1\021\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\001\002\000\034" +
    "\004\uffd0\005\uffd0\006\uffd0\010\uffd0\012\uffd0\017\uffd0\021" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\001\002\000\034\004\uffd4\005\uffd4\006\141\010\140\012" +
    "\uffd4\017\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\001\002\000\024\004\135\005\136\012" +
    "\uffd6\017\uffd6\021\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6" +
    "\001\002\000\024\004\135\005\136\012\uffd7\017\uffd7\021" +
    "\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\001\002\000\020" +
    "\005\104\011\123\031\120\047\106\050\112\051\115\052" +
    "\116\001\002\000\016\012\uffdd\017\uffdd\021\uffdd\024\uffdd" +
    "\025\uffdd\026\151\001\002\000\020\005\104\011\123\031" +
    "\120\047\106\050\112\051\115\052\116\001\002\000\016" +
    "\012\uffdb\017\uffdb\021\uffdb\024\uffdb\025\uffdb\026\uffdb\001" +
    "\002\000\020\005\104\011\123\031\120\047\106\050\112" +
    "\051\115\052\116\001\002\000\016\012\uffd9\017\uffd9\021" +
    "\uffd9\024\uffd9\025\uffd9\026\uffd9\001\002\000\034\004\uffcd" +
    "\005\uffcd\006\uffcd\010\uffcd\012\uffcd\017\uffcd\021\uffcd\023" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\001\002" +
    "\000\020\005\104\011\123\031\120\047\106\050\112\051" +
    "\115\052\116\001\002\000\004\017\uffe6\001\002\000\004" +
    "\021\165\001\002\000\004\017\162\001\002\000\022\005" +
    "\104\011\123\014\164\031\120\047\106\050\112\051\115" +
    "\052\116\001\002\000\004\017\uffe5\001\002\000\006\036" +
    "\ufff0\042\ufff0\001\002\000\004\052\166\001\002\000\006" +
    "\007\173\022\174\001\002\000\006\017\uffe4\024\171\001" +
    "\002\000\006\017\uffe3\024\uffe3\001\002\000\004\052\166" +
    "\001\002\000\006\017\uffe2\024\uffe2\001\002\000\004\044" +
    "\176\001\002\000\020\005\104\011\123\031\120\047\106" +
    "\050\112\051\115\052\116\001\002\000\006\017\uffe1\024" +
    "\uffe1\001\002\000\004\011\177\001\002\000\020\005\104" +
    "\011\123\031\120\047\106\050\112\051\115\052\116\001" +
    "\002\000\004\012\201\001\002\000\006\017\uffe0\024\uffe0" +
    "\001\002\000\006\032\026\033\025\001\002\000\004\017" +
    "\uffeb\001\002\000\020\005\104\011\123\031\120\047\106" +
    "\050\112\051\115\052\116\001\002\000\004\017\uffef\001" +
    "\002\000\006\034\075\052\036\001\002\000\004\017\uffec" +
    "\001\002\000\004\017\211\001\002\000\004\035\102\001" +
    "\002\000\004\017\213\001\002\000\020\005\104\011\123" +
    "\031\120\047\106\050\112\051\115\052\116\001\002\000" +
    "\004\017\215\001\002\000\022\005\104\011\123\014\216" +
    "\031\120\047\106\050\112\051\115\052\116\001\002\000" +
    "\006\036\ufff1\042\ufff1\001\002\000\010\036\011\043\016" +
    "\046\012\001\002\000\004\017\ufffa\001\002\000\004\017" +
    "\224\001\002\000\006\036\011\042\031\001\002\000\004" +
    "\002\ufffe\001\002\000\006\036\011\043\016\001\002\000" +
    "\004\017\ufff7\001\002\000\006\036\011\042\031\001\002" +
    "\000\004\002\uffff\001\002\000\006\036\011\043\016\001" +
    "\002\000\006\036\011\042\031\001\002\000\004\002\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\022\024\003\026\013\027\004\030\007\031" +
    "\005\032\012\033\006\043\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\061\001\001" +
    "\000\002\001\001\000\006\024\031\040\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\023\041\036\037\037\040\041\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\041" +
    "\034\051\035\047\036\050\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\063\001\001\000\002\001\001\000" +
    "\004\025\065\001\001\000\002\001\001\000\012\017\076" +
    "\021\072\022\073\023\075\001\001\000\004\023\070\001" +
    "\001\000\004\025\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\100\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\002\107\003\120\004" +
    "\112\005\104\006\106\007\121\010\113\011\110\012\116" +
    "\001\001\000\006\002\107\012\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\107\012\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\107\003\123\004\112" +
    "\005\104\006\106\007\121\010\113\011\110\012\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\107\010\145\011\110\012\116" +
    "\001\001\000\012\002\107\010\144\011\110\012\116\001" +
    "\001\000\010\002\107\011\143\012\116\001\001\000\010" +
    "\002\107\011\136\012\116\001\001\000\002\001\001\000" +
    "\006\002\107\012\142\001\001\000\006\002\107\012\141" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\002\107" +
    "\005\147\006\106\007\121\010\113\011\110\012\116\001" +
    "\001\000\002\001\001\000\016\002\107\006\106\007\151" +
    "\010\113\011\110\012\116\001\001\000\002\001\001\000" +
    "\014\002\107\006\153\010\113\011\110\012\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\002\107\003" +
    "\157\004\112\005\104\006\106\007\121\010\113\011\110" +
    "\012\116\015\156\016\160\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\002\107\003\157" +
    "\004\112\005\104\006\106\007\121\010\113\011\110\012" +
    "\116\015\162\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\167\014\166\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\002\107\003" +
    "\174\004\112\005\104\006\106\007\121\010\113\011\110" +
    "\012\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\107\003\177\004\112\005\104\006\106\007\121" +
    "\010\113\011\110\012\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\042\202\001\001\000\002\001\001" +
    "\000\024\002\107\003\204\004\112\005\104\006\106\007" +
    "\121\010\113\011\110\012\116\001\001\000\002\001\001" +
    "\000\010\017\207\022\206\023\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\211\001\001\000\002" +
    "\001\001\000\030\002\107\003\157\004\112\005\104\006" +
    "\106\007\121\010\113\011\110\012\116\015\156\016\213" +
    "\001\001\000\002\001\001\000\026\002\107\003\157\004" +
    "\112\005\104\006\106\007\121\010\113\011\110\012\116" +
    "\015\162\001\001\000\002\001\001\000\014\024\003\026" +
    "\221\027\220\030\217\032\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\024\031\040\222\001\001\000" +
    "\002\001\001\000\010\024\003\026\225\032\224\001\001" +
    "\000\002\001\001\000\006\024\031\040\226\001\001\000" +
    "\002\001\001\000\010\024\003\026\230\032\224\001\001" +
    "\000\006\024\031\040\231\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserFaulty$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserFaulty$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserFaulty$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	 /*   public static void main(String args[]) throws Exception {
		SymbolFactory sf = new DefaultSymbolFactory();
		if (args.length==0) new parserFaulty(new scannerFaulty(System.in,sf),sf).parse();
		else new parserFaulty(new scannerFaulty(new java.io.FileInputStream(args[0]),sf),sf).parse();
	     
        }*/
	
    public void syntax_error(Symbol s){
        System.out.println("Syntax Error - line: " +  s.left +  " - value:" + (String)s.value);
    }


    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {    
         System.out.println("Unrecovered Syntax error line: " +  s.left +  " - value:" + (String)(s.value));
    }
                                 	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserFaulty$actions {
  private final parserFaulty parser;

  /** Constructor */
  CUP$parserFaulty$actions(parserFaulty parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserFaulty$do_action(
    int                        CUP$parserFaulty$act_num,
    java_cup.runtime.lr_parser CUP$parserFaulty$parser,
    java.util.Stack            CUP$parserFaulty$stack,
    int                        CUP$parserFaulty$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserFaulty$result;

      /* select the action based on the action number */
      switch (CUP$parserFaulty$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // invk ::= RUN ID LPARENT RPARENT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		 
                                      RESULT = id;
                                   
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("invk",27, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // processInvk ::= processInvk SEMICOLON invk 
            {
              LinkedList<String> RESULT =null;
		int listInvkleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listInvkright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<String> listInvk = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int nameProcleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int nameProcright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		String nameProc = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 listInvk.add(nameProc);
                                                                  RESULT = listInvk;
                        
                                                               
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("processInvk",26, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // processInvk ::= invk 
            {
              LinkedList<String> RESULT =null;
		int nameProcleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int nameProcright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		String nameProc = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  
                                 LinkedList<String> listInvk = new LinkedList<String>();
                                 listInvk.add(nameProc);
                                 RESULT = listInvk;
                        
                              
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("processInvk",26, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // proc ::= varDecls COLON ID 
            {
              LinkedList<AuxiliarProcessDecl> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  LinkedList<AuxiliarProcessDecl> listProcess = new LinkedList<AuxiliarProcessDecl>();
                                              AuxiliarProcessDecl p;
                                              for (int i = 0; i < listNames.size(); i++){
                                                    p= new AuxiliarProcessDecl( listNames.get(i) , type);
                                                    listProcess.add(p);
                                                   
                                               }

                                             RESULT = listProcess;
                                          
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("proc",28, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // processDecl ::= processDecl SEMICOLON proc 
            {
              LinkedList<AuxiliarProcessDecl> RESULT =null;
		int listProcessleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listProcessright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarProcessDecl> listProcess = (LinkedList<AuxiliarProcessDecl>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		LinkedList<AuxiliarProcessDecl> lp = (LinkedList<AuxiliarProcessDecl>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  for (int i = 0; i < lp.size(); i++){
                                                                  listProcess.add(lp.get(i));
                                                              }
                                                              RESULT = listProcess;
                                                          
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("processDecl",29, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // processDecl ::= proc 
            {
              LinkedList<AuxiliarProcessDecl> RESULT =null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		LinkedList<AuxiliarProcessDecl> lp = (LinkedList<AuxiliarProcessDecl>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  LinkedList<AuxiliarProcessDecl> listProcess = new LinkedList<AuxiliarProcessDecl>();
                            for (int i = 0; i < lp.size(); i++){
                               listProcess.add(lp.get(i));
                                                   
                            }
                            RESULT = listProcess;
                        
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("processDecl",29, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // body ::= processDecl SEMICOLON processInvk SEMICOLON 
            {
              AuxiliarMain RESULT =null;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		LinkedList<AuxiliarProcessDecl> declList = (LinkedList<AuxiliarProcessDecl>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int invkListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int invkListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		LinkedList<String> invkList = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		  AuxiliarMain main = new AuxiliarMain(declList,invkList); 
                                                                           RESULT=main; 
                                                                        
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("body",31, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // program ::= MAIN LPARENT RPARENT LBRACE body RBRACE 
            {
              AuxiliarMain RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarMain m = (AuxiliarMain)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		 RESULT= m; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("program",30, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // primary ::= LPARENT expr RPARENT 
            {
              AuxiliarExpression RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarExpression ex = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		 
                                       
                                       RESULT = ex;
                                    
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // primary ::= ID POINT GET LPARENT RPARENT 
            {
              AuxiliarExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).value;
		 
                                              AuxiliarChanAccess chanAcc = new AuxiliarChanAccess(id);
                                              RESULT = chanAcc; 
                                            
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // primary ::= ID 
            {
              AuxiliarExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 
                    AuxiliarVar value = new AuxiliarVar(id);
                    RESULT= value; 
                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // primary ::= FALSE 
            {
              AuxiliarExpression RESULT =null;
		  AuxiliarConsBoolExp value = new AuxiliarConsBoolExp(false);
                      RESULT = value;
                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // primary ::= TRUE 
            {
              AuxiliarExpression RESULT =null;
		    AuxiliarConsBoolExp value = new AuxiliarConsBoolExp(true);
                       RESULT = value;
                   
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // primary ::= INTEGER 
            {
              AuxiliarExpression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  AuxiliarConsIntExp value = new AuxiliarConsIntExp(v);
                           RESULT = value;
                       
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("primary",0, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // factor ::= MINUS factor 
            {
              AuxiliarExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression value = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarConsIntExp zero = new AuxiliarConsIntExp(new Integer(0));
                                   AuxiliarNegIntExp expr = new AuxiliarNegIntExp(zero,value); 
                                   RESULT = expr;
                                
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= EXCLAMATION factor 
            {
              AuxiliarExpression RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression value = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarNegBoolExp expr = new AuxiliarNegBoolExp(value); 
                                        RESULT = expr;
                                     
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= primary 
            {
              AuxiliarExpression RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 RESULT = op;
                       
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // term ::= term SLASH factor 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarDivIntExp expr = new AuxiliarDivIntExp(op1,op2); 
                                         RESULT = expr;
                                       
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // term ::= term ASTERISK factor 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarMultIntExp expr = new AuxiliarMultIntExp(op1,op2); 
                                            RESULT = expr;
                                         
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // term ::= factor 
            {
              AuxiliarExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression val = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  RESULT = val; 
                        
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("term",7, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // addition ::= addition MINUS term 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarNegIntExp expr = new AuxiliarNegIntExp(op1,op2); 
                                               RESULT = expr;
                                            
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // addition ::= addition PLUS term 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarSumIntExp expr = new AuxiliarSumIntExp(op1,op2); 
                                              RESULT = expr;
                                           
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // addition ::= term 
            {
              AuxiliarExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression val = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  RESULT = val; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("addition",6, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // relation ::= addition GT addition 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarGreaterBoolExp expr = new AuxiliarGreaterBoolExp(op1,op2); 
                                                RESULT = expr;
                                             
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // relation ::= addition LT addition 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarLessBoolExp expr = new AuxiliarLessBoolExp(op1,op2); 
                                                RESULT = expr;
                                             
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // relation ::= addition 
            {
              AuxiliarExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression val = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  RESULT = val; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("relation",4, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // comparison ::= relation DOUBLE_EQUAL relation 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarEqBoolExp expr = new AuxiliarEqBoolExp(op1,op2); 
                                                           RESULT = expr;
                                                        
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("comparison",5, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparison ::= relation 
            {
              AuxiliarExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression val = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  RESULT = val; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("comparison",5, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // conjunction ::= conjunction AND comparison 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarAndBoolExp expr = new AuxiliarAndBoolExp(op1,op2); 
                                                      RESULT = expr;
                                                   
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("conjunction",3, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // conjunction ::= comparison 
            {
              AuxiliarExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression val = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  RESULT = val; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("conjunction",3, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // disjunction ::= disjunction OR conjunction 
            {
              AuxiliarExpression RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression op1 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression op2 = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarOrBoolExp expr = new AuxiliarOrBoolExp(op1,op2); 
                                                      RESULT = expr;
                                                   
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("disjunction",2, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // disjunction ::= conjunction 
            {
              AuxiliarExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression val = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 RESULT = val; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("disjunction",2, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= disjunction 
            {
              AuxiliarExpression RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression val = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  RESULT = val; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("expr",1, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // assignation ::= ID POINT PUT LPARENT expr RPARENT 
            {
              AuxiliarCode RESULT =null;
		int nameChleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).left;
		int nameChright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).right;
		String nameCh = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarExpression value = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		 RESULT = new AuxiliarChanAssign(nameCh, value); 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("assignation",9, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // assignation ::= ID EQUAL expr 
            {
              AuxiliarCode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression value = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		   
                                           AuxiliarVar var = new AuxiliarVar(i);
                                           RESULT = new AuxiliarVarAssign(var,value);
                                      
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("assignation",9, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assigList ::= assigList COMMA assignation 
            {
              LinkedList<AuxiliarCode> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarCode> list = (LinkedList<AuxiliarCode>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarCode assign = (AuxiliarCode)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 list.add(assign);
                                                          RESULT = list;
                                                       
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("assigList",10, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assigList ::= assignation 
            {
              LinkedList<AuxiliarCode> RESULT =null;
		int assignleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarCode assign = (AuxiliarCode)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 LinkedList<AuxiliarCode> list = new LinkedList<AuxiliarCode>();
                                     list.add(assign);
                                     RESULT = list; 
                                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("assigList",10, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // branch ::= expr RIGHTARROW assigList 
            {
              AuxiliarBranch RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarExpression e = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		LinkedList<AuxiliarCode> list = (LinkedList<AuxiliarCode>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		   //ListAssign l = new ListAssign(list);
                                                  AuxiliarBranch b = new AuxiliarBranch(e,list,false);
                                                  RESULT = b;
                                             
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("branch",11, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // branchList ::= branchList SEMICOLON branch 
            {
              LinkedList<AuxiliarBranch> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarBranch> list = (LinkedList<AuxiliarBranch>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarBranch b = (AuxiliarBranch)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 list.add(b);
                                                       RESULT = list;
                                                    
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("branchList",12, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // branchList ::= branch 
            {
              LinkedList<AuxiliarBranch> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarBranch b = (AuxiliarBranch)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  LinkedList<AuxiliarBranch> list = new LinkedList<AuxiliarBranch>();
                             list.add(b);
                             RESULT = list; 
                         
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("branchList",12, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type ::= BOOL 
            {
              Type RESULT =null;
		 RESULT = Type.BOOL; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("type",32, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= INT 
            {
              Type RESULT =null;
		 RESULT = Type.INT; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("type",32, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // varDecls ::= varDecls COMMA ID 
            {
              LinkedList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<String> list = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 list.add(i);
                                          RESULT = list;
                                       
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("varDecls",17, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // varDecls ::= ID 
            {
              LinkedList<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  LinkedList<String> list = new LinkedList<String>();
                       list.add(i);
                       RESULT = list; 
                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("varDecls",17, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // decl ::= varDecls COLON type 
            {
              LinkedList<AuxiliarVar> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  LinkedList<AuxiliarVar> list = new LinkedList<AuxiliarVar>();
                                             AuxiliarVar v;
                                             
                                             if ( t.isINT() ){
                                                
                                                 for (int i = 0; i < listNames.size(); i++){
                                                    v = new AuxiliarVar(listNames.get(i), Type.INT);
                                                    list.add(v);
                                                  }
                                              }
                                              else{
                                                 
                                                 for (int i = 0; i < listNames.size(); i++){
                                                     v = new AuxiliarVar(listNames.get(i), Type.BOOL);
                                                    list.add(v);
                                                 }
                                              }
        	                                    
                                              
                                              RESULT = list;
                                          
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("decl",16, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declList ::= declList SEMICOLON decl 
            {
              LinkedList<AuxiliarVar> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarVar> list = (LinkedList<AuxiliarVar>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		LinkedList<AuxiliarVar> listD = (LinkedList<AuxiliarVar>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 for (int i = 0; i < listD.size(); i++){
        	                                            list.add(listD.get(i));
                                                     }
                                                     RESULT = list;
                                                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("declList",15, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declList ::= decl 
            {
              LinkedList<AuxiliarVar> RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		LinkedList<AuxiliarVar> listD = (LinkedList<AuxiliarVar>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  
                             LinkedList<AuxiliarVar> list = new LinkedList<AuxiliarVar>();
                             for (int i = 0; i < listD.size(); i++){
        	                    list.add(listD.get(i));
                             }
                             RESULT = list; 
                        
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("declList",15, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // normCond ::= NORMATIVE COLON expr 
            {
              AuxiliarExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression e = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 RESULT = e; 
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("normCond",14, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // initialCond ::= INIT COLON expr 
            {
              AuxiliarExpression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarExpression e = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 RESULT = e;  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("initialCond",13, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bodyProcess ::= LBRACE initialCond SEMICOLON normCond SEMICOLON branchList SEMICOLON RBRACE 
            {
              AuxiliarProcess RESULT =null;
		int initleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).right;
		AuxiliarExpression init = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).value;
		int normleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).left;
		int normright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).right;
		AuxiliarExpression norm = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).value;
		int listBleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listBright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarBranch> listB = (LinkedList<AuxiliarBranch>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		 AuxiliarProcess proc = new AuxiliarProcess(init,norm,listB);
                                                                                                                                         RESULT = proc;
                                                                                                                                          
                                                                                                                                      
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("bodyProcess",19, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-7)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bodyProcess ::= LBRACE declList SEMICOLON initialCond SEMICOLON normCond SEMICOLON branchList SEMICOLON RBRACE 
            {
              AuxiliarProcess RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-8)).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-8)).right;
		LinkedList<AuxiliarVar> listD = (LinkedList<AuxiliarVar>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-8)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).right;
		AuxiliarExpression init = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)).value;
		int normleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).left;
		int normright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).right;
		AuxiliarExpression norm = (AuxiliarExpression)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)).value;
		int listBleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listBright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<AuxiliarBranch> listB = (LinkedList<AuxiliarBranch>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		 AuxiliarProcess proc = new AuxiliarProcess(init,norm,listD,listB);
                                                                                                                                         RESULT = proc;
                                                                                                                                          
                                                                                                                                      
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("bodyProcess",19, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-9)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // process ::= PROCESS ID bodyProcess 
            {
              AuxiliarProcess RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarProcess proc = (AuxiliarProcess)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 proc.setName(name);
                                                 RESULT = proc;
                                              
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("process",18, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // process ::= PROCESS ID USES varDecls bodyProcess 
            {
              AuxiliarProcess RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int listCleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int listCright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		LinkedList<String> listC = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int procleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarProcess proc = (AuxiliarProcess)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 proc.setName(name);
                                                                    proc.setChannelIds(listC);
                                                                    RESULT = proc;  
                                                                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("process",18, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-4)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // processList ::= processList process 
            {
              AuxiliarProcessCollection RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProcessCollection list = (AuxiliarProcessCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarProcess p = (AuxiliarProcess)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 list.addProcess(p);
                                               RESULT = list; 
                                            
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("processList",20, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // processList ::= process 
            {
              AuxiliarProcessCollection RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarProcess p = (AuxiliarProcess)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 
                                  AuxiliarProcessCollection list = new AuxiliarProcessCollection();
                                  list.addProcess(p);
                                  RESULT = list; 
                            
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("processList",20, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // chanDecl ::= CHANNEL ID LBRACKET INTEGER RBRACKET OF type 
            {
              AuxiliarChannel RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).value;
		int sizeleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int sizeright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		Integer size = (Integer)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  
                                                                           if (t.equals("INT")){
                                                                               RESULT = new AuxiliarChannel( name, size , Type.INT);
                                                                           }
                                                                           else{
                                                                               RESULT = new AuxiliarChannel( name, size, Type.BOOL);
                                                                               
                                                                           }
                                                                        
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("chanDecl",24, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-6)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // channelList ::= channelList SEMICOLON chanDecl 
            {
              AuxiliarChannelCollection RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarChannelCollection list = (AuxiliarChannelCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarChannel c = (AuxiliarChannel)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 
                                                          if(c.getType().isBOOLEAN()){
                                                             list.addBoolChannel(c);
                                                          }
                                                          else{
                                                              list.addIntChannel(c);
                                                          }
                                                          RESULT = list; 
                                                       
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("channelList",21, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // channelList ::= chanDecl 
            {
              AuxiliarChannelCollection RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarChannel c = (AuxiliarChannel)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		     AuxiliarChannelCollection list = new AuxiliarChannelCollection();
                                  if(c.getType().isBOOLEAN()){
                                      list.addBoolChannel(c);
                                  }
                                  else{
                                        list.addIntChannel(c);
                                      
                                  }
                                 
                                  RESULT = list; 
                           
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("channelList",21, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // globalDecl ::= GLOBAL varDecls COLON type 
            {
              LinkedList<AuxiliarVar> RESULT =null;
		int listNamesleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listNamesright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		LinkedList<String> listNames = (LinkedList<String>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  LinkedList<AuxiliarVar> list = new LinkedList<AuxiliarVar>();
                                                          AuxiliarVar v;
                                             
                                                          if ( t.isINT() ){
                                                             for (int i = 0; i < listNames.size(); i++){
                                                                 v = new AuxiliarVar(listNames.get(i), Type.INT);
                                                                 list.add(v);
                                                             }
                                                          }
                                                          else{
                                                 
                                                              for (int i = 0; i < listNames.size(); i++){
                                                                  v = new AuxiliarVar(listNames.get(i), Type.BOOL);
                                                                  list.add(v);
                                                              }
                                                          }
        	                                              RESULT = list;
                                                      
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("globalDecl",22, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // globalVarList ::= globalVarList SEMICOLON globalDecl 
            {
              AuxiliarGlobalVarCollection RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).right;
		AuxiliarGlobalVarCollection list = (AuxiliarGlobalVarCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)).value;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		LinkedList<AuxiliarVar> listD = (LinkedList<AuxiliarVar>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarVar var;
                                                                    for (int i = 0; i < listD.size(); i++){
                                                                       var = listD.get(i);
                                                                       if(var.getType().isINT()){
                                                                           list.addGlobalIntVar(var);
                                                                       }
                                                                       else{
                                                                           list.addGlobalBoolVar(var);
                                                                       }
                                                                    }
                                                                    RESULT = list;
                                                                  
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("globalVarList",23, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-2)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // globalVarList ::= globalDecl 
            {
              AuxiliarGlobalVarCollection RESULT =null;
		int listDleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int listDright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		LinkedList<AuxiliarVar> listD = (LinkedList<AuxiliarVar>)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  
                                         AuxiliarGlobalVarCollection list = new AuxiliarGlobalVarCollection();
                                         AuxiliarVar var;
                                         for (int i = 0; i < listD.size(); i++){
                                            var = listD.get(i);
                                            if(var.getType().isINT()){
                                                list.addGlobalIntVar(var);
                                            }
                                            else{
                                                list.addGlobalBoolVar(var);
                                            }
                                         }
                                         RESULT = list; 
                                     
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("globalVarList",23, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // specification ::= processList program 
            {
              AuxiliarProgram RESULT =null;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProcessCollection pList = (AuxiliarProcessCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarMain main = (AuxiliarMain)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		  AuxiliarProgram prog = new AuxiliarProgram(pList, main);
                                                         RESULT = prog;
                                                     
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("specification",25, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // specification ::= channelList SEMICOLON processList program 
            {
              AuxiliarProgram RESULT =null;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		AuxiliarChannelCollection cList = (AuxiliarChannelCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProcessCollection pList = (AuxiliarProcessCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarMain main = (AuxiliarMain)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarProgram prog = new AuxiliarProgram(cList,pList, main);
                                                                                   RESULT = prog;
                                                                                
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("specification",25, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // specification ::= globalVarList SEMICOLON processList program 
            {
              AuxiliarProgram RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		AuxiliarGlobalVarCollection vList = (AuxiliarGlobalVarCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProcessCollection pList = (AuxiliarProcessCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarMain main = (AuxiliarMain)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarProgram prog = new AuxiliarProgram(vList,pList, main);
                                                                                  RESULT = prog;
                                                                                
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("specification",25, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // specification ::= globalVarList SEMICOLON channelList SEMICOLON processList program 
            {
              AuxiliarProgram RESULT =null;
		int vListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).left;
		int vListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).right;
		AuxiliarGlobalVarCollection vList = (AuxiliarGlobalVarCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)).value;
		int cListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).left;
		int cListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).right;
		AuxiliarChannelCollection cList = (AuxiliarChannelCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-3)).value;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProcessCollection pList = (AuxiliarProcessCollection)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		int mainleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarMain main = (AuxiliarMain)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 AuxiliarProgram prog = new AuxiliarProgram(vList,cList,pList, main);
                                                                                  RESULT = prog;
                                                                                
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("specification",25, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-5)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // mainSpecification ::= specification 
            {
              AuxiliarProgram RESULT =null;
		int progleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()).right;
		AuxiliarProgram prog = (AuxiliarProgram)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.peek()).value;
		 /* TypeCheckerVisitor typeV = new TypeCheckerVisitor();
                                             prog.accept(typeV);
                                             Type result = typeV.getType();
                                             System.out.println("end type visitor");
                                             if(result == Type.ERROR){
                                                 LinkedList<faulty.auxiliar.Error> errorList = typeV.getErrorList();
                                                 for(int i=0; i<errorList.size(); i++){
                                                     System.out.println(errorList.get(i).getErrorMsg());
                                                 }
                                             }
                                             else{
                                                 BuilderVisitor builder = new BuilderVisitor(typeV.getSymbolTable());
                                                 prog.accept(builder);
                                                 Program faultyProg = builder.getProgram();
                                                 if(faultyProg !=null){
                                                   System.out.println(" :)");
                                                 }else{
                                                   System.out.println(" :( ");
                                                 }
                                              
                                             }*/
                                             
                                             RESULT = prog;
                                         
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("mainSpecification",33, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          return CUP$parserFaulty$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= mainSpecification EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).right;
		AuxiliarProgram start_val = (AuxiliarProgram)((java_cup.runtime.Symbol) CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)).value;
		RESULT = start_val;
              CUP$parserFaulty$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.elementAt(CUP$parserFaulty$top-1)), ((java_cup.runtime.Symbol)CUP$parserFaulty$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserFaulty$parser.done_parsing();
          return CUP$parserFaulty$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

